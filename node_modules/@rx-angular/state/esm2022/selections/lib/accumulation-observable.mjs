import { BehaviorSubject, EMPTY, merge, queueScheduler, Subject, } from 'rxjs';
import { catchError, distinctUntilChanged, mergeAll, observeOn, publish, publishReplay, scan, tap, withLatestFrom, } from 'rxjs/operators';
export const defaultAccumulator = (st, sl) => {
    return { ...st, ...sl };
};
export function createAccumulationObservable(stateObservables = new Subject(), stateSlices = new Subject(), accumulatorObservable = new BehaviorSubject(defaultAccumulator), scheduler = queueScheduler) {
    const observeStateOn = () => scheduler ? observeOn(scheduler) : (o$) => o$;
    const signal$ = merge(stateObservables.pipe(distinctUntilChanged(), mergeAll(), observeStateOn()), stateSlices.pipe(observeStateOn())).pipe(withLatestFrom(accumulatorObservable.pipe(observeStateOn())), scan((state, [slice, stateAccumulator]) => stateAccumulator(state, slice), {}), tap((newState) => (compositionObservable.state = newState), (error) => console.error(error)), 
    // @Notice We catch the error here as it get lost in between `publish` and `publishReplay`. We return empty to
    catchError((e) => EMPTY), publish());
    const state$ = signal$.pipe(publishReplay(1));
    const compositionObservable = {
        state: {},
        signal$,
        state$,
        nextSlice,
        nextSliceObservable,
        nextAccumulator,
        subscribe,
    };
    // ======
    return compositionObservable;
    // ======
    function nextAccumulator(accumulatorFn) {
        accumulatorObservable.next(accumulatorFn);
    }
    function nextSlice(stateSlice) {
        stateSlices.next(stateSlice);
    }
    function nextSliceObservable(stateObservable) {
        stateObservables.next(stateObservable);
    }
    function subscribe() {
        const sub = compositionObservable.signal$.connect();
        sub.add(compositionObservable.state$.connect());
        sub.add(() => {
            accumulatorObservable.complete();
            stateObservables.complete();
            stateSlices.complete();
        });
        return sub;
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYWNjdW11bGF0aW9uLW9ic2VydmFibGUuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi8uLi9saWJzL3N0YXRlL3NlbGVjdGlvbnMvc3JjL2xpYi9hY2N1bXVsYXRpb24tb2JzZXJ2YWJsZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQ0wsZUFBZSxFQUVmLEtBQUssRUFDTCxLQUFLLEVBR0wsY0FBYyxFQUVkLE9BQU8sR0FFUixNQUFNLE1BQU0sQ0FBQztBQUNkLE9BQU8sRUFDTCxVQUFVLEVBQ1Ysb0JBQW9CLEVBQ3BCLFFBQVEsRUFDUixTQUFTLEVBQ1QsT0FBTyxFQUNQLGFBQWEsRUFDYixJQUFJLEVBQ0osR0FBRyxFQUNILGNBQWMsR0FDZixNQUFNLGdCQUFnQixDQUFDO0FBR3hCLE1BQU0sQ0FBQyxNQUFNLGtCQUFrQixHQUFtQixDQUNoRCxFQUFLLEVBQ0wsRUFBYyxFQUNYLEVBQUU7SUFDTCxPQUFPLEVBQUUsR0FBRyxFQUFFLEVBQUUsR0FBRyxFQUFFLEVBQUUsQ0FBQztBQUMxQixDQUFDLENBQUM7QUFFRixNQUFNLFVBQVUsNEJBQTRCLENBQzFDLG1CQUFtQixJQUFJLE9BQU8sRUFBMEIsRUFDeEQsY0FBYyxJQUFJLE9BQU8sRUFBYyxFQUN2QyxxQkFBcUIsR0FBRyxJQUFJLGVBQWUsQ0FBQyxrQkFBa0IsQ0FBQyxFQUMvRCxZQUFrQyxjQUFjO0lBRWhELE1BQU0sY0FBYyxHQUFHLEdBQW1DLEVBQUUsQ0FDMUQsU0FBUyxDQUFDLENBQUMsQ0FBQyxTQUFTLENBQUMsU0FBUyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsRUFBRSxFQUFFLEVBQUUsQ0FBQyxFQUFFLENBQUM7SUFDaEQsTUFBTSxPQUFPLEdBQUcsS0FBSyxDQUNuQixnQkFBZ0IsQ0FBQyxJQUFJLENBQUMsb0JBQW9CLEVBQUUsRUFBRSxRQUFRLEVBQUUsRUFBRSxjQUFjLEVBQUUsQ0FBQyxFQUMzRSxXQUFXLENBQUMsSUFBSSxDQUFDLGNBQWMsRUFBRSxDQUFDLENBQ25DLENBQUMsSUFBSSxDQUNKLGNBQWMsQ0FBQyxxQkFBcUIsQ0FBQyxJQUFJLENBQUMsY0FBYyxFQUFFLENBQUMsQ0FBQyxFQUM1RCxJQUFJLENBQ0YsQ0FBQyxLQUFLLEVBQUUsQ0FBQyxLQUFLLEVBQUUsZ0JBQWdCLENBQUMsRUFBRSxFQUFFLENBQUMsZ0JBQWdCLENBQUMsS0FBSyxFQUFFLEtBQUssQ0FBQyxFQUNwRSxFQUFPLENBQ1IsRUFDRCxHQUFHLENBQ0QsQ0FBQyxRQUFRLEVBQUUsRUFBRSxDQUFDLENBQUMscUJBQXFCLENBQUMsS0FBSyxHQUFHLFFBQVEsQ0FBQyxFQUN0RCxDQUFDLEtBQUssRUFBRSxFQUFFLENBQUMsT0FBTyxDQUFDLEtBQUssQ0FBQyxLQUFLLENBQUMsQ0FDaEM7SUFDRCw4R0FBOEc7SUFDOUcsVUFBVSxDQUFDLENBQUMsQ0FBQyxFQUFFLEVBQUUsQ0FBQyxLQUFLLENBQUMsRUFDeEIsT0FBTyxFQUFFLENBQ1YsQ0FBQztJQUNGLE1BQU0sTUFBTSxHQUFrQixPQUFPLENBQUMsSUFBSSxDQUFDLGFBQWEsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDO0lBQzdELE1BQU0scUJBQXFCLEdBQW1CO1FBQzVDLEtBQUssRUFBRSxFQUFPO1FBQ2QsT0FBTztRQUNQLE1BQU07UUFDTixTQUFTO1FBQ1QsbUJBQW1CO1FBQ25CLGVBQWU7UUFDZixTQUFTO0tBQ1YsQ0FBQztJQUVGLFNBQVM7SUFFVCxPQUFPLHFCQUFxQixDQUFDO0lBRTdCLFNBQVM7SUFFVCxTQUFTLGVBQWUsQ0FBQyxhQUE2QjtRQUNwRCxxQkFBcUIsQ0FBQyxJQUFJLENBQUMsYUFBYSxDQUFDLENBQUM7SUFDNUMsQ0FBQztJQUVELFNBQVMsU0FBUyxDQUFDLFVBQXNCO1FBQ3ZDLFdBQVcsQ0FBQyxJQUFJLENBQUMsVUFBVSxDQUFDLENBQUM7SUFDL0IsQ0FBQztJQUVELFNBQVMsbUJBQW1CLENBQUMsZUFBdUM7UUFDbEUsZ0JBQWdCLENBQUMsSUFBSSxDQUFDLGVBQWUsQ0FBQyxDQUFDO0lBQ3pDLENBQUM7SUFFRCxTQUFTLFNBQVM7UUFDaEIsTUFBTSxHQUFHLEdBQ1AscUJBQXFCLENBQUMsT0FDdkIsQ0FBQyxPQUFPLEVBQUUsQ0FBQztRQUNaLEdBQUcsQ0FBQyxHQUFHLENBQ0oscUJBQXFCLENBQUMsTUFBbUMsQ0FBQyxPQUFPLEVBQUUsQ0FDckUsQ0FBQztRQUNGLEdBQUcsQ0FBQyxHQUFHLENBQUMsR0FBRyxFQUFFO1lBQ1gscUJBQXFCLENBQUMsUUFBUSxFQUFFLENBQUM7WUFDakMsZ0JBQWdCLENBQUMsUUFBUSxFQUFFLENBQUM7WUFDNUIsV0FBVyxDQUFDLFFBQVEsRUFBRSxDQUFDO1FBQ3pCLENBQUMsQ0FBQyxDQUFDO1FBQ0gsT0FBTyxHQUFHLENBQUM7SUFDYixDQUFDO0FBQ0gsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7XG4gIEJlaGF2aW9yU3ViamVjdCxcbiAgQ29ubmVjdGFibGVPYnNlcnZhYmxlLFxuICBFTVBUWSxcbiAgbWVyZ2UsXG4gIE1vbm9UeXBlT3BlcmF0b3JGdW5jdGlvbixcbiAgT2JzZXJ2YWJsZSxcbiAgcXVldWVTY2hlZHVsZXIsXG4gIFNjaGVkdWxlckxpa2UsXG4gIFN1YmplY3QsXG4gIFN1YnNjcmlwdGlvbixcbn0gZnJvbSAncnhqcyc7XG5pbXBvcnQge1xuICBjYXRjaEVycm9yLFxuICBkaXN0aW5jdFVudGlsQ2hhbmdlZCxcbiAgbWVyZ2VBbGwsXG4gIG9ic2VydmVPbixcbiAgcHVibGlzaCxcbiAgcHVibGlzaFJlcGxheSxcbiAgc2NhbixcbiAgdGFwLFxuICB3aXRoTGF0ZXN0RnJvbSxcbn0gZnJvbSAncnhqcy9vcGVyYXRvcnMnO1xuaW1wb3J0IHsgQWNjdW11bGF0aW9uRm4sIEFjY3VtdWxhdG9yIH0gZnJvbSAnLi9tb2RlbCc7XG5cbmV4cG9ydCBjb25zdCBkZWZhdWx0QWNjdW11bGF0b3I6IEFjY3VtdWxhdGlvbkZuID0gPFQ+KFxuICBzdDogVCxcbiAgc2w6IFBhcnRpYWw8VD4sXG4pOiBUID0+IHtcbiAgcmV0dXJuIHsgLi4uc3QsIC4uLnNsIH07XG59O1xuXG5leHBvcnQgZnVuY3Rpb24gY3JlYXRlQWNjdW11bGF0aW9uT2JzZXJ2YWJsZTxUIGV4dGVuZHMgb2JqZWN0PihcbiAgc3RhdGVPYnNlcnZhYmxlcyA9IG5ldyBTdWJqZWN0PE9ic2VydmFibGU8UGFydGlhbDxUPj4+KCksXG4gIHN0YXRlU2xpY2VzID0gbmV3IFN1YmplY3Q8UGFydGlhbDxUPj4oKSxcbiAgYWNjdW11bGF0b3JPYnNlcnZhYmxlID0gbmV3IEJlaGF2aW9yU3ViamVjdChkZWZhdWx0QWNjdW11bGF0b3IpLFxuICBzY2hlZHVsZXI6IFNjaGVkdWxlckxpa2UgfCBudWxsID0gcXVldWVTY2hlZHVsZXIsXG4pOiBBY2N1bXVsYXRvcjxUPiB7XG4gIGNvbnN0IG9ic2VydmVTdGF0ZU9uID0gPFI+KCk6IE1vbm9UeXBlT3BlcmF0b3JGdW5jdGlvbjxSPiA9PlxuICAgIHNjaGVkdWxlciA/IG9ic2VydmVPbihzY2hlZHVsZXIpIDogKG8kKSA9PiBvJDtcbiAgY29uc3Qgc2lnbmFsJCA9IG1lcmdlKFxuICAgIHN0YXRlT2JzZXJ2YWJsZXMucGlwZShkaXN0aW5jdFVudGlsQ2hhbmdlZCgpLCBtZXJnZUFsbCgpLCBvYnNlcnZlU3RhdGVPbigpKSxcbiAgICBzdGF0ZVNsaWNlcy5waXBlKG9ic2VydmVTdGF0ZU9uKCkpLFxuICApLnBpcGUoXG4gICAgd2l0aExhdGVzdEZyb20oYWNjdW11bGF0b3JPYnNlcnZhYmxlLnBpcGUob2JzZXJ2ZVN0YXRlT24oKSkpLFxuICAgIHNjYW4oXG4gICAgICAoc3RhdGUsIFtzbGljZSwgc3RhdGVBY2N1bXVsYXRvcl0pID0+IHN0YXRlQWNjdW11bGF0b3Ioc3RhdGUsIHNsaWNlKSxcbiAgICAgIHt9IGFzIFQsXG4gICAgKSxcbiAgICB0YXAoXG4gICAgICAobmV3U3RhdGUpID0+IChjb21wb3NpdGlvbk9ic2VydmFibGUuc3RhdGUgPSBuZXdTdGF0ZSksXG4gICAgICAoZXJyb3IpID0+IGNvbnNvbGUuZXJyb3IoZXJyb3IpLFxuICAgICksXG4gICAgLy8gQE5vdGljZSBXZSBjYXRjaCB0aGUgZXJyb3IgaGVyZSBhcyBpdCBnZXQgbG9zdCBpbiBiZXR3ZWVuIGBwdWJsaXNoYCBhbmQgYHB1Ymxpc2hSZXBsYXlgLiBXZSByZXR1cm4gZW1wdHkgdG9cbiAgICBjYXRjaEVycm9yKChlKSA9PiBFTVBUWSksXG4gICAgcHVibGlzaCgpLFxuICApO1xuICBjb25zdCBzdGF0ZSQ6IE9ic2VydmFibGU8VD4gPSBzaWduYWwkLnBpcGUocHVibGlzaFJlcGxheSgxKSk7XG4gIGNvbnN0IGNvbXBvc2l0aW9uT2JzZXJ2YWJsZTogQWNjdW11bGF0b3I8VD4gPSB7XG4gICAgc3RhdGU6IHt9IGFzIFQsXG4gICAgc2lnbmFsJCxcbiAgICBzdGF0ZSQsXG4gICAgbmV4dFNsaWNlLFxuICAgIG5leHRTbGljZU9ic2VydmFibGUsXG4gICAgbmV4dEFjY3VtdWxhdG9yLFxuICAgIHN1YnNjcmliZSxcbiAgfTtcblxuICAvLyA9PT09PT1cblxuICByZXR1cm4gY29tcG9zaXRpb25PYnNlcnZhYmxlO1xuXG4gIC8vID09PT09PVxuXG4gIGZ1bmN0aW9uIG5leHRBY2N1bXVsYXRvcihhY2N1bXVsYXRvckZuOiBBY2N1bXVsYXRpb25Gbik6IHZvaWQge1xuICAgIGFjY3VtdWxhdG9yT2JzZXJ2YWJsZS5uZXh0KGFjY3VtdWxhdG9yRm4pO1xuICB9XG5cbiAgZnVuY3Rpb24gbmV4dFNsaWNlKHN0YXRlU2xpY2U6IFBhcnRpYWw8VD4pOiB2b2lkIHtcbiAgICBzdGF0ZVNsaWNlcy5uZXh0KHN0YXRlU2xpY2UpO1xuICB9XG5cbiAgZnVuY3Rpb24gbmV4dFNsaWNlT2JzZXJ2YWJsZShzdGF0ZU9ic2VydmFibGU6IE9ic2VydmFibGU8UGFydGlhbDxUPj4pOiB2b2lkIHtcbiAgICBzdGF0ZU9ic2VydmFibGVzLm5leHQoc3RhdGVPYnNlcnZhYmxlKTtcbiAgfVxuXG4gIGZ1bmN0aW9uIHN1YnNjcmliZSgpOiBTdWJzY3JpcHRpb24ge1xuICAgIGNvbnN0IHN1YiA9IChcbiAgICAgIGNvbXBvc2l0aW9uT2JzZXJ2YWJsZS5zaWduYWwkIGFzIENvbm5lY3RhYmxlT2JzZXJ2YWJsZTxUPlxuICAgICkuY29ubmVjdCgpO1xuICAgIHN1Yi5hZGQoXG4gICAgICAoY29tcG9zaXRpb25PYnNlcnZhYmxlLnN0YXRlJCBhcyBDb25uZWN0YWJsZU9ic2VydmFibGU8VD4pLmNvbm5lY3QoKSxcbiAgICApO1xuICAgIHN1Yi5hZGQoKCkgPT4ge1xuICAgICAgYWNjdW11bGF0b3JPYnNlcnZhYmxlLmNvbXBsZXRlKCk7XG4gICAgICBzdGF0ZU9ic2VydmFibGVzLmNvbXBsZXRlKCk7XG4gICAgICBzdGF0ZVNsaWNlcy5jb21wbGV0ZSgpO1xuICAgIH0pO1xuICAgIHJldHVybiBzdWI7XG4gIH1cbn1cbiJdfQ==