import { distinctUntilChanged, filter, shareReplay } from 'rxjs/operators';
import { isOperateFnArrayGuard } from '../utils/guards';
import { pipeFromArray } from '../utils/pipe-from-array';
/**
 * @description
 *
 * As it acts like the Observables `pipe` method, it accepts one or many RxJS operators as params.
 *
 * @example
 * import { Observable } from 'rxjs';
 * import { map } from 'rxjs/operators';
 * import { stateful } from 'rx-angular/state';
 *
 * const state$: Observable<{ name: string; items: string[] }>;
 * const derivation$ = state$.pipe(
 *   stateful(
 *     map(state => state.list.length),
 *     filter(length => length > 3)
 *   )
 * );
 *
 * @param {OperatorFunction<T, A>} optionalDerive - one or multiple passed operator comma separated
 *
 * @docsPage stateful
 * @docsCategory operators
 */
export function stateful(...optionalDerive) {
    return (s) => {
        return s.pipe(
        // distinct same base-state objects (e.g. a default emission of default switch cases, incorrect mutable handling
        // of data) @TODO evaluate benefits vs. overhead
        distinctUntilChanged(), 
        // CUSTOM LOGIC HERE
        (o) => {
            if (isOperateFnArrayGuard(optionalDerive)) {
                return o.pipe(pipeFromArray(optionalDerive));
            }
            return o;
        }, 
        // initial emissions, undefined is no base-state, pollution with skip(1)
        filter((v) => v !== undefined), 
        // distinct same derivation value
        distinctUntilChanged(), 
        // reuse custom operations result for multiple subscribers and reemit the last calculated value.
        shareReplay({ bufferSize: 1, refCount: true }));
    };
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic3RhdGVmdWwuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi8uLi8uLi9saWJzL3N0YXRlL3NlbGVjdGlvbnMvc3JjL2xpYi9vcGVyYXRvcnMvc3RhdGVmdWwudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQ0EsT0FBTyxFQUFFLG9CQUFvQixFQUFFLE1BQU0sRUFBRSxXQUFXLEVBQUUsTUFBTSxnQkFBZ0IsQ0FBQztBQUUzRSxPQUFPLEVBQUUscUJBQXFCLEVBQUUsTUFBTSxpQkFBaUIsQ0FBQztBQUN4RCxPQUFPLEVBQUUsYUFBYSxFQUFFLE1BQU0sMEJBQTBCLENBQUM7QUFtRnpEOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0dBc0JHO0FBQ0gsTUFBTSxVQUFVLFFBQVEsQ0FDdEIsR0FBRyxjQUF3QztJQUUzQyxPQUFPLENBQUMsQ0FBZ0IsRUFBaUQsRUFBRTtRQUN6RSxPQUFPLENBQUMsQ0FBQyxJQUFJO1FBQ1gsZ0hBQWdIO1FBQ2hILGdEQUFnRDtRQUNoRCxvQkFBb0IsRUFBRTtRQUN0QixvQkFBb0I7UUFDcEIsQ0FBQyxDQUFnQixFQUFxQixFQUFFO1lBQ3RDLElBQUkscUJBQXFCLENBQUMsY0FBYyxDQUFDLEVBQUUsQ0FBQztnQkFDMUMsT0FBTyxDQUFDLENBQUMsSUFBSSxDQUFDLGFBQWEsQ0FBQyxjQUFjLENBQUMsQ0FBQyxDQUFDO1lBQy9DLENBQUM7WUFDRCxPQUFPLENBQUMsQ0FBQztRQUNYLENBQUM7UUFDRCx3RUFBd0U7UUFDeEUsTUFBTSxDQUFDLENBQUMsQ0FBQyxFQUErQixFQUFFLENBQUMsQ0FBQyxLQUFLLFNBQVMsQ0FBQztRQUMzRCxpQ0FBaUM7UUFDakMsb0JBQW9CLEVBQUU7UUFDdEIsZ0dBQWdHO1FBQ2hHLFdBQVcsQ0FBQyxFQUFFLFVBQVUsRUFBRSxDQUFDLEVBQUUsUUFBUSxFQUFFLElBQUksRUFBRSxDQUFDLENBQy9DLENBQUM7SUFDSixDQUFDLENBQUM7QUFDSixDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgT2JzZXJ2YWJsZSwgT3BlcmF0b3JGdW5jdGlvbiB9IGZyb20gJ3J4anMnO1xuaW1wb3J0IHsgZGlzdGluY3RVbnRpbENoYW5nZWQsIGZpbHRlciwgc2hhcmVSZXBsYXkgfSBmcm9tICdyeGpzL29wZXJhdG9ycyc7XG5pbXBvcnQgeyBOb25VbmRlZmluZWQgfSBmcm9tICcuLi9pbnRlcmZhY2VzJztcbmltcG9ydCB7IGlzT3BlcmF0ZUZuQXJyYXlHdWFyZCB9IGZyb20gJy4uL3V0aWxzL2d1YXJkcyc7XG5pbXBvcnQgeyBwaXBlRnJvbUFycmF5IH0gZnJvbSAnLi4vdXRpbHMvcGlwZS1mcm9tLWFycmF5JztcblxuLyoqXG4gKiBAZGVzY3JpcHRpb25cbiAqXG4gKiBBcyB0aGUgbmFtZSBgc3RhdGVmdWxgIGltcGxpZXMgdGhpcyBvcGVyYXRvciBpcyB1c2VmdWwgd2hlbiB5b3UgcHJvY2VzcyBhbiBPYnNlcnZhYmxlIHdoaWNoIG1haW50YWlucyBzdGF0ZS5cbiAqXG4gKiBNYWludGFpbmluZyBzdGF0ZSBhcyBhbiBgT2JzZXJ2YWJsZWAgc291cmNlIGNvbWVzIHdpdGggYSBoYW5kZnVsIG9mIHJlcGV0aXRpdmUgYXMgd2VsbCBhcyB1c2UgY2FzZSBzcGVjaWZpYyB0YXNrcy5cbiAqXG4gKiBJdCBhY3RzIGxpa2UgdGhlIE9ic2VydmFibGVzIGBwaXBlYCBtZXRob2QuXG4gKiBJdCBhY2NlcHRzIFJ4SlMgb3BlcmF0b3JzIGFuZCBjb21wb3NlcyB0aGVtIGxpa2UgYE9ic2VydmFibGUjcGlwZWAgYW5kIHRoZSBzdGFuZGFsb25lIGBwaXBlYCBtZXRob2QuXG4gKlxuICogRnVydGhlcm1vcmUsIGl0IHRha2VzIGNhcmUgb2YgdGhlIGFib3ZlIG1lbnRpb25lZCByZXBldGl0aXZlIHRhc2tzIGFzIGxpc3RlZCBiZWxvdy5cbiAqXG4gKiBZb3Ugd2lsbCBhbHdheXMgKGFrYSByZXBldGl0aXZlKSB3YW50IHRvIGVuc3VyZSB0aGF0OlxuICogLSBvbmx5IGRpc3RpbmN0IHN0YXRlIGNoYW5nZXMgYXJlIGVtaXR0ZWRcbiAqIC0gb25seSBkZWZpbmVkIHZhbHVlcyBhcmUgZW1pdHRlZCAoZmlsdGVyIG91dCB1bmRlZmluZWQsIHdoaWNoIGVuc3VyZXMgbGF6eSBzdGF0ZSlcbiAqIC0gc2hhcmUgYW5kIHJlcGxheSBjdXN0b20gb3BlcmF0aW9ucyBmb3IgbXVsdGlwbGUgc3Vic2NyaWJlcnMgKHNhdmVzIHBlcmZvcm1hbmNlKVxuICpcbiAqIFlvdSB3aWxsIHNvbWV0aW1lcyAoYWthIHNpdHVhdGlvbmFsKSBuZWVkOlxuICogLSBhIHN1YnNldCBvZiB0aGUgc3RhdGUgKGRlcml2YXRpb25zKVxuICogLSBjb21wb3NlIHRoZSBzdGF0ZSB3aXRoIG90aGVyIE9ic2VydmFibGVzIG9yIGNoYW5nZSB0aGUgT2JzZXJ2YWJsZXMgYmVoYXZpb3VyXG4gKlxuICpcbiAqIEBleGFtcGxlXG4gKiBpbXBvcnQgeyBPYnNlcnZhYmxlIH0gZnJvbSAncnhqcyc7XG4gKiBpbXBvcnQgeyBtYXAgfSBmcm9tICdyeGpzL29wZXJhdG9ycyc7XG4gKiBpbXBvcnQgeyBzdGF0ZWZ1bCB9IGZyb20gJ3J4LWFuZ3VsYXIvc3RhdGUnO1xuICpcbiAqIGNvbnN0IHN0YXRlJDogT2JzZXJ2YWJsZTx7IG5hbWU6IHN0cmluZzsgaXRlbXM6IHN0cmluZ1tdIH0+O1xuICogY29uc3QgZGVyaXZhdGlvbiQgPSBzdGF0ZSQucGlwZShcbiAqICAgc3RhdGVmdWwoXG4gKiAgICAgbWFwKHN0YXRlID0+IHN0YXRlLmxpc3QubGVuZ3RoKSxcbiAqICAgICBmaWx0ZXIobGVuZ3RoID0+IGxlbmd0aCA+IDMpXG4gKiAgIClcbiAqICk7XG4gKlxuICogQHJldHVybiBPcGVyYXRvckZ1bmN0aW9uPFQsIE5vblVuZGVmaW5lZDxBPj5cbiAqXG4gKiBAZG9jc1BhZ2Ugc3RhdGVmdWxcbiAqIEBkb2NzQ2F0ZWdvcnkgb3BlcmF0b3JzXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBzdGF0ZWZ1bDxUPigpOiBPcGVyYXRvckZ1bmN0aW9uPFQsIE5vblVuZGVmaW5lZDxUPj47XG4vKipcbiAqIEBpbnRlcm5hbFxuICovXG5leHBvcnQgZnVuY3Rpb24gc3RhdGVmdWw8VCwgQT4oXG4gIG9wOiBPcGVyYXRvckZ1bmN0aW9uPFQsIEE+XG4pOiBPcGVyYXRvckZ1bmN0aW9uPFQsIE5vblVuZGVmaW5lZDxBPj47XG4vKipcbiAqIEBpbnRlcm5hbFxuICovXG5leHBvcnQgZnVuY3Rpb24gc3RhdGVmdWw8VCwgQSwgQj4oXG4gIG9wMTogT3BlcmF0b3JGdW5jdGlvbjxULCBBPixcbiAgb3AyOiBPcGVyYXRvckZ1bmN0aW9uPEEsIEI+XG4pOiBPcGVyYXRvckZ1bmN0aW9uPFQsIE5vblVuZGVmaW5lZDxCPj47XG4vKipcbiAqIEBpbnRlcm5hbFxuICovXG5leHBvcnQgZnVuY3Rpb24gc3RhdGVmdWw8VCwgQSwgQiwgQz4oXG4gIG9wMTogT3BlcmF0b3JGdW5jdGlvbjxULCBBPixcbiAgb3AyOiBPcGVyYXRvckZ1bmN0aW9uPEEsIEI+LFxuICBvcDM6IE9wZXJhdG9yRnVuY3Rpb248QiwgQz5cbik6IE9wZXJhdG9yRnVuY3Rpb248VCwgTm9uVW5kZWZpbmVkPEM+Pjtcbi8qKlxuICogQGludGVybmFsXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBzdGF0ZWZ1bDxULCBBLCBCLCBDLCBEPihcbiAgb3AxOiBPcGVyYXRvckZ1bmN0aW9uPFQsIEE+LFxuICBvcDI6IE9wZXJhdG9yRnVuY3Rpb248QSwgQj4sXG4gIG9wMzogT3BlcmF0b3JGdW5jdGlvbjxCLCBDPixcbiAgb3A0OiBPcGVyYXRvckZ1bmN0aW9uPEMsIEQ+XG4pOiBPcGVyYXRvckZ1bmN0aW9uPFQsIE5vblVuZGVmaW5lZDxEPj47XG4vKipcbiAqIEBpbnRlcm5hbFxuICovXG5leHBvcnQgZnVuY3Rpb24gc3RhdGVmdWw8VCwgQSwgQiwgQywgRCwgRT4oXG4gIG9wMTogT3BlcmF0b3JGdW5jdGlvbjxULCBBPixcbiAgb3AyOiBPcGVyYXRvckZ1bmN0aW9uPEEsIEI+LFxuICBvcDM6IE9wZXJhdG9yRnVuY3Rpb248QiwgQz4sXG4gIG9wNDogT3BlcmF0b3JGdW5jdGlvbjxDLCBEPixcbiAgb3A1OiBPcGVyYXRvckZ1bmN0aW9uPEQsIEU+XG4pOiBPcGVyYXRvckZ1bmN0aW9uPFQsIE5vblVuZGVmaW5lZDxFPj47XG4vKipcbiAqIEBkZXNjcmlwdGlvblxuICpcbiAqIEFzIGl0IGFjdHMgbGlrZSB0aGUgT2JzZXJ2YWJsZXMgYHBpcGVgIG1ldGhvZCwgaXQgYWNjZXB0cyBvbmUgb3IgbWFueSBSeEpTIG9wZXJhdG9ycyBhcyBwYXJhbXMuXG4gKlxuICogQGV4YW1wbGVcbiAqIGltcG9ydCB7IE9ic2VydmFibGUgfSBmcm9tICdyeGpzJztcbiAqIGltcG9ydCB7IG1hcCB9IGZyb20gJ3J4anMvb3BlcmF0b3JzJztcbiAqIGltcG9ydCB7IHN0YXRlZnVsIH0gZnJvbSAncngtYW5ndWxhci9zdGF0ZSc7XG4gKlxuICogY29uc3Qgc3RhdGUkOiBPYnNlcnZhYmxlPHsgbmFtZTogc3RyaW5nOyBpdGVtczogc3RyaW5nW10gfT47XG4gKiBjb25zdCBkZXJpdmF0aW9uJCA9IHN0YXRlJC5waXBlKFxuICogICBzdGF0ZWZ1bChcbiAqICAgICBtYXAoc3RhdGUgPT4gc3RhdGUubGlzdC5sZW5ndGgpLFxuICogICAgIGZpbHRlcihsZW5ndGggPT4gbGVuZ3RoID4gMylcbiAqICAgKVxuICogKTtcbiAqXG4gKiBAcGFyYW0ge09wZXJhdG9yRnVuY3Rpb248VCwgQT59IG9wdGlvbmFsRGVyaXZlIC0gb25lIG9yIG11bHRpcGxlIHBhc3NlZCBvcGVyYXRvciBjb21tYSBzZXBhcmF0ZWRcbiAqXG4gKiBAZG9jc1BhZ2Ugc3RhdGVmdWxcbiAqIEBkb2NzQ2F0ZWdvcnkgb3BlcmF0b3JzXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBzdGF0ZWZ1bDxULCBSPihcbiAgLi4ub3B0aW9uYWxEZXJpdmU6IE9wZXJhdG9yRnVuY3Rpb248VCwgUj5bXVxuKTogT3BlcmF0b3JGdW5jdGlvbjxULCBOb25VbmRlZmluZWQ8VD4gfCBOb25VbmRlZmluZWQ8Uj4+IHtcbiAgcmV0dXJuIChzOiBPYnNlcnZhYmxlPFQ+KTogT2JzZXJ2YWJsZTxOb25VbmRlZmluZWQ8VD4gfCBOb25VbmRlZmluZWQ8Uj4+ID0+IHtcbiAgICByZXR1cm4gcy5waXBlKFxuICAgICAgLy8gZGlzdGluY3Qgc2FtZSBiYXNlLXN0YXRlIG9iamVjdHMgKGUuZy4gYSBkZWZhdWx0IGVtaXNzaW9uIG9mIGRlZmF1bHQgc3dpdGNoIGNhc2VzLCBpbmNvcnJlY3QgbXV0YWJsZSBoYW5kbGluZ1xuICAgICAgLy8gb2YgZGF0YSkgQFRPRE8gZXZhbHVhdGUgYmVuZWZpdHMgdnMuIG92ZXJoZWFkXG4gICAgICBkaXN0aW5jdFVudGlsQ2hhbmdlZCgpLFxuICAgICAgLy8gQ1VTVE9NIExPR0lDIEhFUkVcbiAgICAgIChvOiBPYnNlcnZhYmxlPFQ+KTogT2JzZXJ2YWJsZTxUIHwgUj4gPT4ge1xuICAgICAgICBpZiAoaXNPcGVyYXRlRm5BcnJheUd1YXJkKG9wdGlvbmFsRGVyaXZlKSkge1xuICAgICAgICAgIHJldHVybiBvLnBpcGUocGlwZUZyb21BcnJheShvcHRpb25hbERlcml2ZSkpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBvO1xuICAgICAgfSxcbiAgICAgIC8vIGluaXRpYWwgZW1pc3Npb25zLCB1bmRlZmluZWQgaXMgbm8gYmFzZS1zdGF0ZSwgcG9sbHV0aW9uIHdpdGggc2tpcCgxKVxuICAgICAgZmlsdGVyKCh2KTogdiBpcyBOb25VbmRlZmluZWQ8dHlwZW9mIHY+ID0+IHYgIT09IHVuZGVmaW5lZCksXG4gICAgICAvLyBkaXN0aW5jdCBzYW1lIGRlcml2YXRpb24gdmFsdWVcbiAgICAgIGRpc3RpbmN0VW50aWxDaGFuZ2VkKCksXG4gICAgICAvLyByZXVzZSBjdXN0b20gb3BlcmF0aW9ucyByZXN1bHQgZm9yIG11bHRpcGxlIHN1YnNjcmliZXJzIGFuZCByZWVtaXQgdGhlIGxhc3QgY2FsY3VsYXRlZCB2YWx1ZS5cbiAgICAgIHNoYXJlUmVwbGF5KHsgYnVmZmVyU2l6ZTogMSwgcmVmQ291bnQ6IHRydWUgfSlcbiAgICApO1xuICB9O1xufVxuIl19