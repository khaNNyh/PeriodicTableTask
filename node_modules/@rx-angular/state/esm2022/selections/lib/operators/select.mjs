import { map } from 'rxjs/operators';
import { isOperateFnArrayGuard, isStringAndFunctionTupleGuard, isStringArrayFunctionAndOptionalObjectTupleGuard, isStringArrayGuard, } from '../utils/guards';
import { pipeFromArray } from '../utils/pipe-from-array';
import { selectSlice } from './selectSlice';
import { stateful } from './stateful';
/**
 * @internal
 */
export function select(...opOrMapFn) {
    return (state$) => {
        if (!opOrMapFn || opOrMapFn.length === 0) {
            return state$.pipe(stateful());
        }
        else if (isStringAndFunctionTupleGuard(opOrMapFn)) {
            return state$.pipe(stateful(map((s) => opOrMapFn[1](s[opOrMapFn[0]]))));
        }
        else if (isStringArrayFunctionAndOptionalObjectTupleGuard(opOrMapFn)) {
            const selectedState$ = state$.pipe(selectSlice(opOrMapFn[0], opOrMapFn[2]));
            return typeof opOrMapFn[1] === 'undefined'
                ? selectedState$
                : selectedState$.pipe(stateful(map(opOrMapFn[1])));
        }
        else if (isStringArrayGuard(opOrMapFn)) {
            return state$.pipe(stateful(map((state) => opOrMapFn.reduce((acc, key) => acc?.[key], state))));
        }
        else if (isOperateFnArrayGuard(opOrMapFn)) {
            return state$.pipe(stateful(pipeFromArray(opOrMapFn)));
        }
        else {
            throw new Error('wrong params passed to select');
        }
    };
}
//# sourceMappingURL=data:application/json;base64,