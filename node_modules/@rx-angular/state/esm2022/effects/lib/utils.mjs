import { filter, map, shareReplay, take, takeUntil } from 'rxjs/operators';
export function isSingleShotHookNameGuard(name) {
    return !!name && typeof name === 'string' && name !== '';
}
/**
 * @internal
 * Operator to filter values for single shot observables
 */
const singleShotOperators = (o$) => o$.pipe(filter((v) => v === true), take(1), shareReplay());
/**
 * This is an operator that is used to listen to Angular lifecycle hooks.
 * It plucks a defined lefe cycle name `HookProps` and forwards values for the particular value and in the behavior of the hook e.g. single shot
 *
 * @param name
 */
export function toHook(name) {
    const operators = isSingleShotHookNameGuard(name)
        ? singleShotOperators
        : (o) => o;
    return (o$) => o$.pipe(map((p) => p[name]), operators);
}
/**
 * This operator can be used to take instances that implements `OnDestroy$` and unsubscribes from the given Observable when the instances
 * `onDestroy$` Observable emits.
 *
 * @param instanceWithLifecycle
 */
export function untilDestroyed(instanceWithLifecycle) {
    return (source) => source.pipe(takeUntil(instanceWithLifecycle.onDestroy$));
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidXRpbHMuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi8uLi9saWJzL3N0YXRlL2VmZmVjdHMvc3JjL2xpYi91dGlscy50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFDQSxPQUFPLEVBQUUsTUFBTSxFQUFFLEdBQUcsRUFBRSxXQUFXLEVBQUUsSUFBSSxFQUFFLFNBQVMsRUFBRSxNQUFNLGdCQUFnQixDQUFDO0FBRzNFLE1BQU0sVUFBVSx5QkFBeUIsQ0FDdkMsSUFBYTtJQUViLE9BQU8sQ0FBQyxDQUFDLElBQUksSUFBSSxPQUFPLElBQUksS0FBSyxRQUFRLElBQUksSUFBSSxLQUFLLEVBQUUsQ0FBQztBQUMzRCxDQUFDO0FBRUQ7OztHQUdHO0FBQ0gsTUFBTSxtQkFBbUIsR0FBRyxDQUFDLEVBQW9CLEVBQW9CLEVBQUUsQ0FDckUsRUFBRSxDQUFDLElBQUksQ0FDTCxNQUFNLENBQUMsQ0FBQyxDQUFDLEVBQUUsRUFBRSxDQUFDLENBQUMsS0FBSyxJQUFJLENBQUMsRUFDekIsSUFBSSxDQUFDLENBQUMsQ0FBQyxFQUNQLFdBQVcsRUFBRSxDQUNkLENBQUM7QUFFSjs7Ozs7R0FLRztBQUNILE1BQU0sVUFBVSxNQUFNLENBQTRCLElBQU87SUFDdkQsTUFBTSxTQUFTLEdBQUcseUJBQXlCLENBQUMsSUFBSSxDQUFDO1FBQy9DLENBQUMsQ0FBQyxtQkFBbUI7UUFDckIsQ0FBQyxDQUFDLENBQUMsQ0FBMkIsRUFBb0IsRUFBRSxDQUFDLENBQUMsQ0FBQztJQUN6RCxPQUFPLENBQUMsRUFBeUIsRUFBNEIsRUFBRSxDQUM3RCxFQUFFLENBQUMsSUFBSSxDQUNMLEdBQUcsQ0FBQyxDQUFDLENBQUMsRUFBRSxFQUFFLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxDQUFDLEVBQ25CLFNBQVMsQ0FDVixDQUFDO0FBQ04sQ0FBQztBQUVEOzs7OztHQUtHO0FBQ0gsTUFBTSxVQUFVLGNBQWMsQ0FDNUIscUJBQWlDO0lBRWpDLE9BQU8sQ0FBQyxNQUFNLEVBQUUsRUFBRSxDQUNoQixNQUFNLENBQUMsSUFBSSxDQUFDLFNBQVMsQ0FBSSxxQkFBcUIsQ0FBQyxVQUFVLENBQUMsQ0FBQyxDQUFDO0FBQ2hFLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBNb25vVHlwZU9wZXJhdG9yRnVuY3Rpb24sIE9ic2VydmFibGUgfSBmcm9tICdyeGpzJztcbmltcG9ydCB7IGZpbHRlciwgbWFwLCBzaGFyZVJlcGxheSwgdGFrZSwgdGFrZVVudGlsIH0gZnJvbSAncnhqcy9vcGVyYXRvcnMnO1xuaW1wb3J0IHsgSG9va1Byb3BzLCBPbkRlc3Ryb3kkLCBTaW5nbGVTaG90UHJvcHMgfSBmcm9tICcuL21vZGVsJztcblxuZXhwb3J0IGZ1bmN0aW9uIGlzU2luZ2xlU2hvdEhvb2tOYW1lR3VhcmQ8VD4oXG4gIG5hbWU6IHVua25vd25cbik6IG5hbWUgaXMga2V5b2YgU2luZ2xlU2hvdFByb3BzIHtcbiAgcmV0dXJuICEhbmFtZSAmJiB0eXBlb2YgbmFtZSA9PT0gJ3N0cmluZycgJiYgbmFtZSAhPT0gJyc7XG59XG5cbi8qKlxuICogQGludGVybmFsXG4gKiBPcGVyYXRvciB0byBmaWx0ZXIgdmFsdWVzIGZvciBzaW5nbGUgc2hvdCBvYnNlcnZhYmxlc1xuICovXG5jb25zdCBzaW5nbGVTaG90T3BlcmF0b3JzID0gKG8kOiBPYnNlcnZhYmxlPHRydWU+KTogT2JzZXJ2YWJsZTx0cnVlPiA9PlxuICBvJC5waXBlKFxuICAgIGZpbHRlcigodikgPT4gdiA9PT0gdHJ1ZSksXG4gICAgdGFrZSgxKSxcbiAgICBzaGFyZVJlcGxheSgpXG4gICk7XG5cbi8qKlxuICogVGhpcyBpcyBhbiBvcGVyYXRvciB0aGF0IGlzIHVzZWQgdG8gbGlzdGVuIHRvIEFuZ3VsYXIgbGlmZWN5Y2xlIGhvb2tzLlxuICogSXQgcGx1Y2tzIGEgZGVmaW5lZCBsZWZlIGN5Y2xlIG5hbWUgYEhvb2tQcm9wc2AgYW5kIGZvcndhcmRzIHZhbHVlcyBmb3IgdGhlIHBhcnRpY3VsYXIgdmFsdWUgYW5kIGluIHRoZSBiZWhhdmlvciBvZiB0aGUgaG9vayBlLmcuIHNpbmdsZSBzaG90XG4gKlxuICogQHBhcmFtIG5hbWVcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIHRvSG9vazxIIGV4dGVuZHMga2V5b2YgSG9va1Byb3BzPihuYW1lOiBIKSB7XG4gIGNvbnN0IG9wZXJhdG9ycyA9IGlzU2luZ2xlU2hvdEhvb2tOYW1lR3VhcmQobmFtZSlcbiAgICA/IHNpbmdsZVNob3RPcGVyYXRvcnNcbiAgICA6IChvOiBPYnNlcnZhYmxlPEhvb2tQcm9wc1tIXT4pOiBPYnNlcnZhYmxlPHRydWU+ID0+IG87XG4gIHJldHVybiAobyQ6IE9ic2VydmFibGU8SG9va1Byb3BzPik6IE9ic2VydmFibGU8SG9va1Byb3BzW0hdPiA9PlxuICAgIG8kLnBpcGUoXG4gICAgICBtYXAoKHApID0+IHBbbmFtZV0pLFxuICAgICAgb3BlcmF0b3JzXG4gICAgKTtcbn1cblxuLyoqXG4gKiBUaGlzIG9wZXJhdG9yIGNhbiBiZSB1c2VkIHRvIHRha2UgaW5zdGFuY2VzIHRoYXQgaW1wbGVtZW50cyBgT25EZXN0cm95JGAgYW5kIHVuc3Vic2NyaWJlcyBmcm9tIHRoZSBnaXZlbiBPYnNlcnZhYmxlIHdoZW4gdGhlIGluc3RhbmNlc1xuICogYG9uRGVzdHJveSRgIE9ic2VydmFibGUgZW1pdHMuXG4gKlxuICogQHBhcmFtIGluc3RhbmNlV2l0aExpZmVjeWNsZVxuICovXG5leHBvcnQgZnVuY3Rpb24gdW50aWxEZXN0cm95ZWQ8Vj4oXG4gIGluc3RhbmNlV2l0aExpZmVjeWNsZTogT25EZXN0cm95JFxuKTogTW9ub1R5cGVPcGVyYXRvckZ1bmN0aW9uPFY+IHtcbiAgcmV0dXJuIChzb3VyY2UpID0+XG4gICAgc291cmNlLnBpcGUodGFrZVVudGlsPFY+KGluc3RhbmNlV2l0aExpZmVjeWNsZS5vbkRlc3Ryb3kkKSk7XG59XG4iXX0=