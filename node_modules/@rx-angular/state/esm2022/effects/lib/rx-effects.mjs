import { assertInInjectionContext, DestroyRef, ErrorHandler, inject, } from '@angular/core';
import { from } from 'rxjs';
/**
 * @description
 * Functional way to setup observable based side effects with RxEffects.
 * It's a creation function for RxEffects that destroys itself when the provided
 * `DestroyRef` is destroyed.
 *
 * @example
 * ```ts
 * import { rxEffects } from '@rx-angular/state/effects';
 *
 * \@Component({})
 * export class FooComponent {
 *  const readonly util = inject(Util);
 *  readonly effects = rxEffects(({ register }) => {
 *    register(this.util.windowResize$, () => {
 *      console.log('window was resized');
 *    })
 *  });
 *
 *  ngOnInit() {
 *    this.effects.register(this.util.rotationChanged$, () => {
 *      console.log('viewport rotation changed');
 *    });
 *  }
 * }
 * ```
 *
 * @param {RxEffectsSetupFn} setupFn
 * @returns RxEffects
 *
 * @docsCategory RxEffects
 * @docsPage RxEffects
 *
 */
export function rxEffects(setupFn) {
    assertInInjectionContext(rxEffects);
    const errorHandler = inject(ErrorHandler, { optional: true });
    const destroyRef = inject(DestroyRef);
    const runningEffects = [];
    destroyRef.onDestroy(() => runningEffects.forEach((ef) => ef.unsubscribe()));
    /**
     * Subscribe to observables and trigger side effect.
     *
     * @example
     *
     * /@Component({
     *   template: `<button name="save" (click)="save()">Save</button>`
     * })
     * class ListComponent {
     *   private ef = rxEffects(({register}) => {
     *      register(timer(0, this.backupInterval), console.log));
     *   }
     * }
     *
     * @param {SideEffectObservable} obs$ Source observable input
     * @param {SideEffectFnOrObserver} sideEffect Observer object
     *
     * @return {Function} - unregisterFn
     */
    function register(obs$, sideEffect) {
        const observer = typeof sideEffect === 'object'
            ? {
                ...sideEffect,
                // preserve original logic
                error: (e) => {
                    sideEffect.error?.(e);
                    errorHandler?.handleError(e);
                },
            }
            : {
                next: sideEffect,
                error: (e) => errorHandler?.handleError(e),
            };
        const sub = from(obs$).subscribe(observer);
        runningEffects.push(sub);
        return () => sub.unsubscribe();
    }
    /**
     * Register custom cleanup logic.
     *
     * @example
     *
     * /@Component({
     *   template: `<button name="save" (click)="save()">Save</button>`
     * })
     * class ListComponent {
     *   private ef = rxEffects(({onDestroy}) => {
     *      onDestroy(() => console.log('done'));
     *   }
     * }
     *
     * @param {Fn} callback onDestroy callback
     *
     * @return {Fn} unregisterFn
     */
    function onDestroy(callback) {
        return destroyRef.onDestroy(callback);
    }
    const effects = {
        register,
        onDestroy,
    };
    setupFn?.(effects);
    return effects;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicngtZWZmZWN0cy5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uLy4uL2xpYnMvc3RhdGUvZWZmZWN0cy9zcmMvbGliL3J4LWVmZmVjdHMudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUNMLHdCQUF3QixFQUN4QixVQUFVLEVBQ1YsWUFBWSxFQUNaLE1BQU0sR0FDUCxNQUFNLGVBQWUsQ0FBQztBQUN2QixPQUFPLEVBQUUsSUFBSSxFQUFnQixNQUFNLE1BQU0sQ0FBQztBQWlCMUM7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztHQWlDRztBQUNILE1BQU0sVUFBVSxTQUFTLENBQUMsT0FBMEI7SUFDbEQsd0JBQXdCLENBQUMsU0FBUyxDQUFDLENBQUM7SUFDcEMsTUFBTSxZQUFZLEdBQUcsTUFBTSxDQUFDLFlBQVksRUFBRSxFQUFFLFFBQVEsRUFBRSxJQUFJLEVBQUUsQ0FBQyxDQUFDO0lBQzlELE1BQU0sVUFBVSxHQUFHLE1BQU0sQ0FBQyxVQUFVLENBQUMsQ0FBQztJQUN0QyxNQUFNLGNBQWMsR0FBbUIsRUFBRSxDQUFDO0lBQzFDLFVBQVUsQ0FBQyxTQUFTLENBQUMsR0FBRyxFQUFFLENBQUMsY0FBYyxDQUFDLE9BQU8sQ0FBQyxDQUFDLEVBQUUsRUFBRSxFQUFFLENBQUMsRUFBRSxDQUFDLFdBQVcsRUFBRSxDQUFDLENBQUMsQ0FBQztJQUU3RTs7Ozs7Ozs7Ozs7Ozs7Ozs7O09Ba0JHO0lBQ0gsU0FBUyxRQUFRLENBQ2YsSUFBNkIsRUFDN0IsVUFBc0M7UUFFdEMsTUFBTSxRQUFRLEdBQ1osT0FBTyxVQUFVLEtBQUssUUFBUTtZQUM1QixDQUFDLENBQUM7Z0JBQ0UsR0FBRyxVQUFVO2dCQUNiLDBCQUEwQjtnQkFDMUIsS0FBSyxFQUFFLENBQUMsQ0FBVSxFQUFFLEVBQUU7b0JBQ3BCLFVBQVUsQ0FBQyxLQUFLLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQztvQkFDdEIsWUFBWSxFQUFFLFdBQVcsQ0FBQyxDQUFDLENBQUMsQ0FBQztnQkFDL0IsQ0FBQzthQUNGO1lBQ0gsQ0FBQyxDQUFDO2dCQUNFLElBQUksRUFBRSxVQUFVO2dCQUNoQixLQUFLLEVBQUUsQ0FBQyxDQUFVLEVBQUUsRUFBRSxDQUFDLFlBQVksRUFBRSxXQUFXLENBQUMsQ0FBQyxDQUFDO2FBQ3BELENBQUM7UUFDUixNQUFNLEdBQUcsR0FBRyxJQUFJLENBQUMsSUFBSSxDQUFDLENBQUMsU0FBUyxDQUFDLFFBQVEsQ0FBQyxDQUFDO1FBQzNDLGNBQWMsQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLENBQUM7UUFDekIsT0FBTyxHQUFHLEVBQUUsQ0FBQyxHQUFHLENBQUMsV0FBVyxFQUFFLENBQUM7SUFDakMsQ0FBQztJQUVEOzs7Ozs7Ozs7Ozs7Ozs7OztPQWlCRztJQUNILFNBQVMsU0FBUyxDQUFDLFFBQVk7UUFDN0IsT0FBTyxVQUFVLENBQUMsU0FBUyxDQUFDLFFBQVEsQ0FBQyxDQUFDO0lBQ3hDLENBQUM7SUFFRCxNQUFNLE9BQU8sR0FBRztRQUNkLFFBQVE7UUFDUixTQUFTO0tBQ1YsQ0FBQztJQUVGLE9BQU8sRUFBRSxDQUFDLE9BQU8sQ0FBQyxDQUFDO0lBRW5CLE9BQU8sT0FBTyxDQUFDO0FBQ2pCLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQge1xuICBhc3NlcnRJbkluamVjdGlvbkNvbnRleHQsXG4gIERlc3Ryb3lSZWYsXG4gIEVycm9ySGFuZGxlcixcbiAgaW5qZWN0LFxufSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IGZyb20sIFN1YnNjcmlwdGlvbiB9IGZyb20gJ3J4anMnO1xuaW1wb3J0IHsgU2lkZUVmZmVjdEZuT3JPYnNlcnZlciwgU2lkZUVmZmVjdE9ic2VydmFibGUgfSBmcm9tICcuL3R5cGVzJztcblxuaW50ZXJmYWNlIFJ4RWZmZWN0cyB7XG4gIHJlZ2lzdGVyPFQ+KFxuICAgIG9ic2VydmFibGU6IFNpZGVFZmZlY3RPYnNlcnZhYmxlPFQ+LFxuICAgIHNpZGVFZmZlY3RPck9ic2VydmVyPzogU2lkZUVmZmVjdEZuT3JPYnNlcnZlcjxUPlxuICApOiBGbjtcbiAgb25EZXN0cm95OiAoZm46IEZuKSA9PiBGbjtcbn1cblxudHlwZSBGbiA9ICgpID0+IHZvaWQ7XG5cbmV4cG9ydCB0eXBlIFJ4RWZmZWN0c1NldHVwRm4gPSAoXG4gIGNmZzogUGljazxSeEVmZmVjdHMsICdyZWdpc3RlcicgfCAnb25EZXN0cm95Jz5cbikgPT4gdm9pZDtcblxuLyoqXG4gKiBAZGVzY3JpcHRpb25cbiAqIEZ1bmN0aW9uYWwgd2F5IHRvIHNldHVwIG9ic2VydmFibGUgYmFzZWQgc2lkZSBlZmZlY3RzIHdpdGggUnhFZmZlY3RzLlxuICogSXQncyBhIGNyZWF0aW9uIGZ1bmN0aW9uIGZvciBSeEVmZmVjdHMgdGhhdCBkZXN0cm95cyBpdHNlbGYgd2hlbiB0aGUgcHJvdmlkZWRcbiAqIGBEZXN0cm95UmVmYCBpcyBkZXN0cm95ZWQuXG4gKlxuICogQGV4YW1wbGVcbiAqIGBgYHRzXG4gKiBpbXBvcnQgeyByeEVmZmVjdHMgfSBmcm9tICdAcngtYW5ndWxhci9zdGF0ZS9lZmZlY3RzJztcbiAqXG4gKiBcXEBDb21wb25lbnQoe30pXG4gKiBleHBvcnQgY2xhc3MgRm9vQ29tcG9uZW50IHtcbiAqICBjb25zdCByZWFkb25seSB1dGlsID0gaW5qZWN0KFV0aWwpO1xuICogIHJlYWRvbmx5IGVmZmVjdHMgPSByeEVmZmVjdHMoKHsgcmVnaXN0ZXIgfSkgPT4ge1xuICogICAgcmVnaXN0ZXIodGhpcy51dGlsLndpbmRvd1Jlc2l6ZSQsICgpID0+IHtcbiAqICAgICAgY29uc29sZS5sb2coJ3dpbmRvdyB3YXMgcmVzaXplZCcpO1xuICogICAgfSlcbiAqICB9KTtcbiAqXG4gKiAgbmdPbkluaXQoKSB7XG4gKiAgICB0aGlzLmVmZmVjdHMucmVnaXN0ZXIodGhpcy51dGlsLnJvdGF0aW9uQ2hhbmdlZCQsICgpID0+IHtcbiAqICAgICAgY29uc29sZS5sb2coJ3ZpZXdwb3J0IHJvdGF0aW9uIGNoYW5nZWQnKTtcbiAqICAgIH0pO1xuICogIH1cbiAqIH1cbiAqIGBgYFxuICpcbiAqIEBwYXJhbSB7UnhFZmZlY3RzU2V0dXBGbn0gc2V0dXBGblxuICogQHJldHVybnMgUnhFZmZlY3RzXG4gKlxuICogQGRvY3NDYXRlZ29yeSBSeEVmZmVjdHNcbiAqIEBkb2NzUGFnZSBSeEVmZmVjdHNcbiAqXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiByeEVmZmVjdHMoc2V0dXBGbj86IFJ4RWZmZWN0c1NldHVwRm4pOiBSeEVmZmVjdHMge1xuICBhc3NlcnRJbkluamVjdGlvbkNvbnRleHQocnhFZmZlY3RzKTtcbiAgY29uc3QgZXJyb3JIYW5kbGVyID0gaW5qZWN0KEVycm9ySGFuZGxlciwgeyBvcHRpb25hbDogdHJ1ZSB9KTtcbiAgY29uc3QgZGVzdHJveVJlZiA9IGluamVjdChEZXN0cm95UmVmKTtcbiAgY29uc3QgcnVubmluZ0VmZmVjdHM6IFN1YnNjcmlwdGlvbltdID0gW107XG4gIGRlc3Ryb3lSZWYub25EZXN0cm95KCgpID0+IHJ1bm5pbmdFZmZlY3RzLmZvckVhY2goKGVmKSA9PiBlZi51bnN1YnNjcmliZSgpKSk7XG5cbiAgLyoqXG4gICAqIFN1YnNjcmliZSB0byBvYnNlcnZhYmxlcyBhbmQgdHJpZ2dlciBzaWRlIGVmZmVjdC5cbiAgICpcbiAgICogQGV4YW1wbGVcbiAgICpcbiAgICogL0BDb21wb25lbnQoe1xuICAgKiAgIHRlbXBsYXRlOiBgPGJ1dHRvbiBuYW1lPVwic2F2ZVwiIChjbGljayk9XCJzYXZlKClcIj5TYXZlPC9idXR0b24+YFxuICAgKiB9KVxuICAgKiBjbGFzcyBMaXN0Q29tcG9uZW50IHtcbiAgICogICBwcml2YXRlIGVmID0gcnhFZmZlY3RzKCh7cmVnaXN0ZXJ9KSA9PiB7XG4gICAqICAgICAgcmVnaXN0ZXIodGltZXIoMCwgdGhpcy5iYWNrdXBJbnRlcnZhbCksIGNvbnNvbGUubG9nKSk7XG4gICAqICAgfVxuICAgKiB9XG4gICAqXG4gICAqIEBwYXJhbSB7U2lkZUVmZmVjdE9ic2VydmFibGV9IG9icyQgU291cmNlIG9ic2VydmFibGUgaW5wdXRcbiAgICogQHBhcmFtIHtTaWRlRWZmZWN0Rm5Pck9ic2VydmVyfSBzaWRlRWZmZWN0IE9ic2VydmVyIG9iamVjdFxuICAgKlxuICAgKiBAcmV0dXJuIHtGdW5jdGlvbn0gLSB1bnJlZ2lzdGVyRm5cbiAgICovXG4gIGZ1bmN0aW9uIHJlZ2lzdGVyPFQ+KFxuICAgIG9icyQ6IFNpZGVFZmZlY3RPYnNlcnZhYmxlPFQ+LFxuICAgIHNpZGVFZmZlY3Q/OiBTaWRlRWZmZWN0Rm5Pck9ic2VydmVyPFQ+XG4gICk6ICgpID0+IHZvaWQge1xuICAgIGNvbnN0IG9ic2VydmVyID1cbiAgICAgIHR5cGVvZiBzaWRlRWZmZWN0ID09PSAnb2JqZWN0J1xuICAgICAgICA/IHtcbiAgICAgICAgICAgIC4uLnNpZGVFZmZlY3QsXG4gICAgICAgICAgICAvLyBwcmVzZXJ2ZSBvcmlnaW5hbCBsb2dpY1xuICAgICAgICAgICAgZXJyb3I6IChlOiB1bmtub3duKSA9PiB7XG4gICAgICAgICAgICAgIHNpZGVFZmZlY3QuZXJyb3I/LihlKTtcbiAgICAgICAgICAgICAgZXJyb3JIYW5kbGVyPy5oYW5kbGVFcnJvcihlKTtcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgfVxuICAgICAgICA6IHtcbiAgICAgICAgICAgIG5leHQ6IHNpZGVFZmZlY3QsXG4gICAgICAgICAgICBlcnJvcjogKGU6IHVua25vd24pID0+IGVycm9ySGFuZGxlcj8uaGFuZGxlRXJyb3IoZSksXG4gICAgICAgICAgfTtcbiAgICBjb25zdCBzdWIgPSBmcm9tKG9icyQpLnN1YnNjcmliZShvYnNlcnZlcik7XG4gICAgcnVubmluZ0VmZmVjdHMucHVzaChzdWIpO1xuICAgIHJldHVybiAoKSA9PiBzdWIudW5zdWJzY3JpYmUoKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBSZWdpc3RlciBjdXN0b20gY2xlYW51cCBsb2dpYy5cbiAgICpcbiAgICogQGV4YW1wbGVcbiAgICpcbiAgICogL0BDb21wb25lbnQoe1xuICAgKiAgIHRlbXBsYXRlOiBgPGJ1dHRvbiBuYW1lPVwic2F2ZVwiIChjbGljayk9XCJzYXZlKClcIj5TYXZlPC9idXR0b24+YFxuICAgKiB9KVxuICAgKiBjbGFzcyBMaXN0Q29tcG9uZW50IHtcbiAgICogICBwcml2YXRlIGVmID0gcnhFZmZlY3RzKCh7b25EZXN0cm95fSkgPT4ge1xuICAgKiAgICAgIG9uRGVzdHJveSgoKSA9PiBjb25zb2xlLmxvZygnZG9uZScpKTtcbiAgICogICB9XG4gICAqIH1cbiAgICpcbiAgICogQHBhcmFtIHtGbn0gY2FsbGJhY2sgb25EZXN0cm95IGNhbGxiYWNrXG4gICAqXG4gICAqIEByZXR1cm4ge0ZufSB1bnJlZ2lzdGVyRm5cbiAgICovXG4gIGZ1bmN0aW9uIG9uRGVzdHJveShjYWxsYmFjazogRm4pOiBGbiB7XG4gICAgcmV0dXJuIGRlc3Ryb3lSZWYub25EZXN0cm95KGNhbGxiYWNrKTtcbiAgfVxuXG4gIGNvbnN0IGVmZmVjdHMgPSB7XG4gICAgcmVnaXN0ZXIsXG4gICAgb25EZXN0cm95LFxuICB9O1xuXG4gIHNldHVwRm4/LihlZmZlY3RzKTtcblxuICByZXR1cm4gZWZmZWN0cztcbn1cbiJdfQ==