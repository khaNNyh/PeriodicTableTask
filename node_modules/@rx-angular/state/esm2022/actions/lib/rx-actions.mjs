import { assertInInjectionContext, DestroyRef, ErrorHandler, inject, } from '@angular/core';
import { actionProxyHandler } from './proxy';
/**
 * Manage events in components and services in a single place
 *
 * @example
 *
 * interface UI {
 *  search: string,
 *  submit: void
 * };
 *
 * import { rxActions } from '@rx-angular/state/actions';
 *
 * @Component({...})
 * export class Component {
 *   ui = rxActions<{ name: string }>(({transforms}) => transforms({name: v => v}));
 *
 *   name$ = this.ui.name$; // Observable<string> - listens to name changes
 *   emitName = this.ui.name; // (name: string) => void - emits name change
 *   sub = this.ui.onName(o$ => o$.pipe(), console.log) // () => void - stops side effect
 *
 *   onInit() {
 *     const name$ = this.ui.name$; // Observable<string> - listens to name changes
 *     const emitName = this.ui.name; // (name: string) => void - emits name change
 *     const stop = this.ui.onName(o$ => o$.pipe(), console.log) // () => void - stops side effect
 *     stop();
 *   }
 *
 * }
 *
 */
export function rxActions(setupFn) {
    // Assert rxAction usage
    assertInInjectionContext(rxActions);
    const subjectMap = {};
    const effectMap = {};
    const errorHandler = inject(ErrorHandler);
    let transformsMap = {};
    /**
     * @internal
     * Internally used to clean up potential subscriptions to the subjects. (For Actions it is most probably a rare case but still important to care about)
     */
    inject(DestroyRef).onDestroy(() => {
        Object.values(subjectMap).forEach((subject) => subject.complete());
    });
    // run setup function if given
    setupFn &&
        setupFn({
            transforms: (t) => (transformsMap = t),
        });
    // create actions
    function signals() { }
    return new Proxy(signals, actionProxyHandler({
        subjectMap,
        transformsMap,
        effectMap,
        errorHandler,
    }));
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicngtYWN0aW9ucy5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uLy4uL2xpYnMvc3RhdGUvYWN0aW9ucy9zcmMvbGliL3J4LWFjdGlvbnMudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUNMLHdCQUF3QixFQUN4QixVQUFVLEVBQ1YsWUFBWSxFQUNaLE1BQU0sR0FDUCxNQUFNLGVBQWUsQ0FBQztBQUN2QixPQUFPLEVBQUUsa0JBQWtCLEVBQUUsTUFBTSxTQUFTLENBQUM7QUFTN0M7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0dBNkJHO0FBQ0gsTUFBTSxVQUFVLFNBQVMsQ0FHdkIsT0FBdUQ7SUFDdkQsd0JBQXdCO0lBQ3hCLHdCQUF3QixDQUFDLFNBQVMsQ0FBQyxDQUFDO0lBRXBDLE1BQU0sVUFBVSxHQUFrQixFQUFtQixDQUFDO0lBQ3RELE1BQU0sU0FBUyxHQUFpQixFQUFrQixDQUFDO0lBQ25ELE1BQU0sWUFBWSxHQUFHLE1BQU0sQ0FBQyxZQUFZLENBQUMsQ0FBQztJQUMxQyxJQUFJLGFBQWEsR0FBRyxFQUFPLENBQUM7SUFFNUI7OztPQUdHO0lBQ0gsTUFBTSxDQUFDLFVBQVUsQ0FBQyxDQUFDLFNBQVMsQ0FBQyxHQUFHLEVBQUU7UUFDaEMsTUFBTSxDQUFDLE1BQU0sQ0FBQyxVQUFVLENBQUMsQ0FBQyxPQUFPLENBQUMsQ0FBQyxPQUFZLEVBQUUsRUFBRSxDQUFDLE9BQU8sQ0FBQyxRQUFRLEVBQUUsQ0FBQyxDQUFDO0lBQzFFLENBQUMsQ0FBQyxDQUFDO0lBRUgsOEJBQThCO0lBQzlCLE9BQU87UUFDTCxPQUFPLENBQUM7WUFDTixVQUFVLEVBQUUsQ0FBQyxDQUFJLEVBQUUsRUFBRSxDQUFDLENBQUMsYUFBYSxHQUFHLENBQUMsQ0FBQztTQUMxQyxDQUFDLENBQUM7SUFFTCxpQkFBaUI7SUFDakIsU0FBUyxPQUFPLEtBQVUsQ0FBQztJQUMzQixPQUFPLElBQUksS0FBSyxDQUNkLE9BQWlDLEVBQ2pDLGtCQUFrQixDQUFDO1FBQ2pCLFVBQVU7UUFDVixhQUFhO1FBQ2IsU0FBUztRQUNULFlBQVk7S0FDYixDQUFDLENBQ3VCLENBQUM7QUFDOUIsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7XG4gIGFzc2VydEluSW5qZWN0aW9uQ29udGV4dCxcbiAgRGVzdHJveVJlZixcbiAgRXJyb3JIYW5kbGVyLFxuICBpbmplY3QsXG59IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgYWN0aW9uUHJveHlIYW5kbGVyIH0gZnJvbSAnLi9wcm94eSc7XG5pbXBvcnQge1xuICBBY3Rpb25zLFxuICBBY3Rpb25UcmFuc2Zvcm1zLFxuICBFZmZlY3RNYXAsXG4gIFJ4QWN0aW9ucyxcbiAgU3ViamVjdE1hcCxcbn0gZnJvbSAnLi90eXBlcyc7XG5cbi8qKlxuICogTWFuYWdlIGV2ZW50cyBpbiBjb21wb25lbnRzIGFuZCBzZXJ2aWNlcyBpbiBhIHNpbmdsZSBwbGFjZVxuICpcbiAqIEBleGFtcGxlXG4gKlxuICogaW50ZXJmYWNlIFVJIHtcbiAqICBzZWFyY2g6IHN0cmluZyxcbiAqICBzdWJtaXQ6IHZvaWRcbiAqIH07XG4gKlxuICogaW1wb3J0IHsgcnhBY3Rpb25zIH0gZnJvbSAnQHJ4LWFuZ3VsYXIvc3RhdGUvYWN0aW9ucyc7XG4gKlxuICogQENvbXBvbmVudCh7Li4ufSlcbiAqIGV4cG9ydCBjbGFzcyBDb21wb25lbnQge1xuICogICB1aSA9IHJ4QWN0aW9uczx7IG5hbWU6IHN0cmluZyB9Pigoe3RyYW5zZm9ybXN9KSA9PiB0cmFuc2Zvcm1zKHtuYW1lOiB2ID0+IHZ9KSk7XG4gKlxuICogICBuYW1lJCA9IHRoaXMudWkubmFtZSQ7IC8vIE9ic2VydmFibGU8c3RyaW5nPiAtIGxpc3RlbnMgdG8gbmFtZSBjaGFuZ2VzXG4gKiAgIGVtaXROYW1lID0gdGhpcy51aS5uYW1lOyAvLyAobmFtZTogc3RyaW5nKSA9PiB2b2lkIC0gZW1pdHMgbmFtZSBjaGFuZ2VcbiAqICAgc3ViID0gdGhpcy51aS5vbk5hbWUobyQgPT4gbyQucGlwZSgpLCBjb25zb2xlLmxvZykgLy8gKCkgPT4gdm9pZCAtIHN0b3BzIHNpZGUgZWZmZWN0XG4gKlxuICogICBvbkluaXQoKSB7XG4gKiAgICAgY29uc3QgbmFtZSQgPSB0aGlzLnVpLm5hbWUkOyAvLyBPYnNlcnZhYmxlPHN0cmluZz4gLSBsaXN0ZW5zIHRvIG5hbWUgY2hhbmdlc1xuICogICAgIGNvbnN0IGVtaXROYW1lID0gdGhpcy51aS5uYW1lOyAvLyAobmFtZTogc3RyaW5nKSA9PiB2b2lkIC0gZW1pdHMgbmFtZSBjaGFuZ2VcbiAqICAgICBjb25zdCBzdG9wID0gdGhpcy51aS5vbk5hbWUobyQgPT4gbyQucGlwZSgpLCBjb25zb2xlLmxvZykgLy8gKCkgPT4gdm9pZCAtIHN0b3BzIHNpZGUgZWZmZWN0XG4gKiAgICAgc3RvcCgpO1xuICogICB9XG4gKlxuICogfVxuICpcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIHJ4QWN0aW9uczxcbiAgVCBleHRlbmRzIFBhcnRpYWw8QWN0aW9ucz4sXG4gIFUgZXh0ZW5kcyBBY3Rpb25UcmFuc2Zvcm1zPFQ+ID0ge31cbj4oc2V0dXBGbj86IChjZmc6IHsgdHJhbnNmb3JtczogKHQ6IFUpID0+IHZvaWQgfSkgPT4gdm9pZCk6IFJ4QWN0aW9uczxULCBVPiB7XG4gIC8vIEFzc2VydCByeEFjdGlvbiB1c2FnZVxuICBhc3NlcnRJbkluamVjdGlvbkNvbnRleHQocnhBY3Rpb25zKTtcblxuICBjb25zdCBzdWJqZWN0TWFwOiBTdWJqZWN0TWFwPFQ+ID0ge30gYXMgU3ViamVjdE1hcDxUPjtcbiAgY29uc3QgZWZmZWN0TWFwOiBFZmZlY3RNYXA8VD4gPSB7fSBhcyBFZmZlY3RNYXA8VD47XG4gIGNvbnN0IGVycm9ySGFuZGxlciA9IGluamVjdChFcnJvckhhbmRsZXIpO1xuICBsZXQgdHJhbnNmb3Jtc01hcCA9IHt9IGFzIFU7XG5cbiAgLyoqXG4gICAqIEBpbnRlcm5hbFxuICAgKiBJbnRlcm5hbGx5IHVzZWQgdG8gY2xlYW4gdXAgcG90ZW50aWFsIHN1YnNjcmlwdGlvbnMgdG8gdGhlIHN1YmplY3RzLiAoRm9yIEFjdGlvbnMgaXQgaXMgbW9zdCBwcm9iYWJseSBhIHJhcmUgY2FzZSBidXQgc3RpbGwgaW1wb3J0YW50IHRvIGNhcmUgYWJvdXQpXG4gICAqL1xuICBpbmplY3QoRGVzdHJveVJlZikub25EZXN0cm95KCgpID0+IHtcbiAgICBPYmplY3QudmFsdWVzKHN1YmplY3RNYXApLmZvckVhY2goKHN1YmplY3Q6IGFueSkgPT4gc3ViamVjdC5jb21wbGV0ZSgpKTtcbiAgfSk7XG5cbiAgLy8gcnVuIHNldHVwIGZ1bmN0aW9uIGlmIGdpdmVuXG4gIHNldHVwRm4gJiZcbiAgICBzZXR1cEZuKHtcbiAgICAgIHRyYW5zZm9ybXM6ICh0OiBVKSA9PiAodHJhbnNmb3Jtc01hcCA9IHQpLFxuICAgIH0pO1xuXG4gIC8vIGNyZWF0ZSBhY3Rpb25zXG4gIGZ1bmN0aW9uIHNpZ25hbHMoKTogdm9pZCB7fVxuICByZXR1cm4gbmV3IFByb3h5KFxuICAgIHNpZ25hbHMgYXMgYW55IGFzIFJ4QWN0aW9uczxULCBVPixcbiAgICBhY3Rpb25Qcm94eUhhbmRsZXIoe1xuICAgICAgc3ViamVjdE1hcCxcbiAgICAgIHRyYW5zZm9ybXNNYXAsXG4gICAgICBlZmZlY3RNYXAsXG4gICAgICBlcnJvckhhbmRsZXIsXG4gICAgfSlcbiAgKSBhcyBhbnkgYXMgUnhBY3Rpb25zPFQsIFU+O1xufVxuIl19