import { merge, Subject } from 'rxjs';
/**
 * @internal
 * Internal helper to create the proxy object
 * It lives as standalone function because we don't need to carrie it in memory for every ActionHandler instance
 * @param subjects
 * @param transforms
 */
export function actionProxyHandler({ subjectMap, transformsMap, effectMap, errorHandler = null, }) {
    function getEventEmitter(prop) {
        if (!subjectMap[prop]) {
            subjectMap[prop] = new Subject();
        }
        return subjectMap[prop];
    }
    function dispatch(value, prop) {
        subjectMap[prop] = subjectMap[prop] || new Subject();
        try {
            const val = transformsMap && transformsMap[prop]
                ? transformsMap[prop](value)
                : value;
            subjectMap[prop].next(val);
        }
        catch (err) {
            errorHandler?.handleError(err);
        }
    }
    return {
        // shorthand setter for multiple EventEmitter e.g. actions({propA: 1, propB: 2})
        apply(_, __, props) {
            props.forEach((slice) => Object.entries(slice).forEach(([k, v]) => dispatch(v, k)));
        },
        get(_, property) {
            const prop = property;
            // the user wants to get multiple or one single EventEmitter as observable `eventEmitter.prop$`
            if (prop.toString().split('').pop() === '$') {
                // the user wants to get multiple EventEmitter as observable `eventEmitter.$(['prop1', 'prop2'])`
                if (prop.toString().length === 1) {
                    return (props) => merge(...props.map((k) => {
                        return getEventEmitter(k);
                    }));
                }
                // the user wants to get a single EventEmitter as observable `eventEmitter.prop$`
                const propName = prop.toString().slice(0, -1);
                return getEventEmitter(propName);
            }
            // the user wants to get a single EventEmitter and trigger a side effect on event emission
            if (prop.toString().startsWith('on')) {
                // we need to first remove the 'on' from the the prop name
                const slicedPropName = prop.toString().slice(2);
                // now convert the slicedPropName to camelcase
                const propName = (slicedPropName.charAt(0).toLowerCase() +
                    slicedPropName.slice(1));
                return (behaviour, sf) => {
                    const sub = getEventEmitter(propName).pipe(behaviour).subscribe(sf);
                    effectMap[propName] = sub;
                    return () => sub.unsubscribe();
                };
            }
            // the user wants to get a dispatcher function to imperatively dispatch the EventEmitter
            return (args) => {
                dispatch(args, prop);
            };
        },
        set() {
            throw new Error('No setters available. To emit call the property name.');
        },
    };
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicHJveHkuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi8uLi9saWJzL3N0YXRlL2FjdGlvbnMvc3JjL2xpYi9wcm94eS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFDQSxPQUFPLEVBQUUsS0FBSyxFQUFvQixPQUFPLEVBQUUsTUFBTSxNQUFNLENBQUM7QUFHeEQ7Ozs7OztHQU1HO0FBQ0gsTUFBTSxVQUFVLGtCQUFrQixDQUFxQyxFQUNyRSxVQUFVLEVBQ1YsYUFBYSxFQUNiLFNBQVMsRUFDVCxZQUFZLEdBQUcsSUFBSSxHQU1wQjtJQUlDLFNBQVMsZUFBZSxDQUFDLElBQWE7UUFDcEMsSUFBSSxDQUFDLFVBQVUsQ0FBQyxJQUFJLENBQUMsRUFBRSxDQUFDO1lBQ3RCLFVBQVUsQ0FBQyxJQUFJLENBQUMsR0FBRyxJQUFJLE9BQU8sRUFBYSxDQUFDO1FBQzlDLENBQUM7UUFDRCxPQUFPLFVBQVUsQ0FBQyxJQUFJLENBQUMsQ0FBQztJQUMxQixDQUFDO0lBQ0QsU0FBUyxRQUFRLENBQUMsS0FBZ0IsRUFBRSxJQUFhO1FBQy9DLFVBQVUsQ0FBQyxJQUFJLENBQUMsR0FBRyxVQUFVLENBQUMsSUFBSSxDQUFDLElBQUksSUFBSSxPQUFPLEVBQWEsQ0FBQztRQUNoRSxJQUFJLENBQUM7WUFDSCxNQUFNLEdBQUcsR0FDUCxhQUFhLElBQUssYUFBcUIsQ0FBQyxJQUFJLENBQUM7Z0JBQzNDLENBQUMsQ0FBRSxhQUFxQixDQUFDLElBQUksQ0FBQyxDQUFDLEtBQUssQ0FBQztnQkFDckMsQ0FBQyxDQUFDLEtBQUssQ0FBQztZQUNaLFVBQVUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLENBQUM7UUFDN0IsQ0FBQztRQUFDLE9BQU8sR0FBRyxFQUFFLENBQUM7WUFDYixZQUFZLEVBQUUsV0FBVyxDQUFDLEdBQUcsQ0FBQyxDQUFDO1FBQ2pDLENBQUM7SUFDSCxDQUFDO0lBQ0QsT0FBTztRQUNMLGdGQUFnRjtRQUNoRixLQUFLLENBQUMsQ0FBa0IsRUFBRSxFQUFPLEVBQUUsS0FBVTtZQUMzQyxLQUFLLENBQUMsT0FBTyxDQUFDLENBQUMsS0FBSyxFQUFFLEVBQUUsQ0FDdEIsTUFBTSxDQUFDLE9BQU8sQ0FBQyxLQUFLLENBQUMsQ0FBQyxPQUFPLENBQUMsQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsRUFBRSxFQUFFLENBQ3ZDLFFBQVEsQ0FBQyxDQUFRLEVBQUUsQ0FBbUIsQ0FBQyxDQUN4QyxDQUNGLENBQUM7UUFDSixDQUFDO1FBQ0QsR0FBRyxDQUFDLENBQUMsRUFBRSxRQUFnQjtZQUNyQixNQUFNLElBQUksR0FBRyxRQUFtQixDQUFDO1lBRWpDLCtGQUErRjtZQUMvRixJQUFJLElBQUksQ0FBQyxRQUFRLEVBQUUsQ0FBQyxLQUFLLENBQUMsRUFBRSxDQUFDLENBQUMsR0FBRyxFQUFFLEtBQUssR0FBRyxFQUFFLENBQUM7Z0JBQzVDLGlHQUFpRztnQkFDakcsSUFBSSxJQUFJLENBQUMsUUFBUSxFQUFFLENBQUMsTUFBTSxLQUFLLENBQUMsRUFBRSxDQUFDO29CQUNqQyxPQUFPLENBQUMsS0FBZ0IsRUFBRSxFQUFFLENBQzFCLEtBQUssQ0FDSCxHQUFHLEtBQUssQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLEVBQUUsRUFBRTt3QkFDakIsT0FBTyxlQUFlLENBQUMsQ0FBQyxDQUFDLENBQUM7b0JBQzVCLENBQUMsQ0FBQyxDQUNILENBQUM7Z0JBQ04sQ0FBQztnQkFDRCxpRkFBaUY7Z0JBQ2pGLE1BQU0sUUFBUSxHQUFHLElBQUksQ0FBQyxRQUFRLEVBQUUsQ0FBQyxLQUFLLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFZLENBQUM7Z0JBQ3pELE9BQU8sZUFBZSxDQUFDLFFBQVEsQ0FBQyxDQUFDO1lBQ25DLENBQUM7WUFFRCwwRkFBMEY7WUFDMUYsSUFBSSxJQUFJLENBQUMsUUFBUSxFQUFFLENBQUMsVUFBVSxDQUFDLElBQUksQ0FBQyxFQUFFLENBQUM7Z0JBQ3JDLDBEQUEwRDtnQkFDMUQsTUFBTSxjQUFjLEdBQUcsSUFBSSxDQUFDLFFBQVEsRUFBRSxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQztnQkFDaEQsOENBQThDO2dCQUM5QyxNQUFNLFFBQVEsR0FBRyxDQUFDLGNBQWMsQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDLENBQUMsV0FBVyxFQUFFO29CQUN0RCxjQUFjLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFZLENBQUM7Z0JBQ3RDLE9BQU8sQ0FDTCxTQUFtRCxFQUNuRCxFQUEyQixFQUMzQixFQUFFO29CQUNGLE1BQU0sR0FBRyxHQUFHLGVBQWUsQ0FBQyxRQUFRLENBQUMsQ0FBQyxJQUFJLENBQUMsU0FBUyxDQUFDLENBQUMsU0FBUyxDQUFDLEVBQUUsQ0FBQyxDQUFDO29CQUNwRSxTQUFTLENBQUMsUUFBUSxDQUFDLEdBQUcsR0FBRyxDQUFDO29CQUMxQixPQUFPLEdBQUcsRUFBRSxDQUFDLEdBQUcsQ0FBQyxXQUFXLEVBQUUsQ0FBQztnQkFDakMsQ0FBQyxDQUFDO1lBQ0osQ0FBQztZQUVELHdGQUF3RjtZQUN4RixPQUFPLENBQUMsSUFBZSxFQUFFLEVBQUU7Z0JBQ3pCLFFBQVEsQ0FBQyxJQUFJLEVBQUUsSUFBSSxDQUFDLENBQUM7WUFDdkIsQ0FBQyxDQUFDO1FBQ0osQ0FBQztRQUNELEdBQUc7WUFDRCxNQUFNLElBQUksS0FBSyxDQUFDLHVEQUF1RCxDQUFDLENBQUM7UUFDM0UsQ0FBQztLQUNGLENBQUM7QUFDSixDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgRXJyb3JIYW5kbGVyIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBtZXJnZSwgT3BlcmF0b3JGdW5jdGlvbiwgU3ViamVjdCB9IGZyb20gJ3J4anMnO1xuaW1wb3J0IHsgRWZmZWN0TWFwLCBLZXlzT2YsIFJ4QWN0aW9ucywgU3ViamVjdE1hcCwgVmFsdWVzT2YgfSBmcm9tICcuL3R5cGVzJztcblxuLyoqXG4gKiBAaW50ZXJuYWxcbiAqIEludGVybmFsIGhlbHBlciB0byBjcmVhdGUgdGhlIHByb3h5IG9iamVjdFxuICogSXQgbGl2ZXMgYXMgc3RhbmRhbG9uZSBmdW5jdGlvbiBiZWNhdXNlIHdlIGRvbid0IG5lZWQgdG8gY2FycmllIGl0IGluIG1lbW9yeSBmb3IgZXZlcnkgQWN0aW9uSGFuZGxlciBpbnN0YW5jZVxuICogQHBhcmFtIHN1YmplY3RzXG4gKiBAcGFyYW0gdHJhbnNmb3Jtc1xuICovXG5leHBvcnQgZnVuY3Rpb24gYWN0aW9uUHJveHlIYW5kbGVyPFQgZXh0ZW5kcyBvYmplY3QsIFUgZXh0ZW5kcyBvYmplY3Q+KHtcbiAgc3ViamVjdE1hcCxcbiAgdHJhbnNmb3Jtc01hcCxcbiAgZWZmZWN0TWFwLFxuICBlcnJvckhhbmRsZXIgPSBudWxsLFxufToge1xuICBzdWJqZWN0TWFwOiBTdWJqZWN0TWFwPFQ+O1xuICB0cmFuc2Zvcm1zTWFwPzogVTtcbiAgZWZmZWN0TWFwOiBFZmZlY3RNYXA8VD47XG4gIGVycm9ySGFuZGxlcjogRXJyb3JIYW5kbGVyIHwgbnVsbDtcbn0pOiBQcm94eUhhbmRsZXI8UnhBY3Rpb25zPFQsIFU+PiB7XG4gIHR5cGUgS2V5c09mVCA9IEtleXNPZjxUPjtcbiAgdHlwZSBWYWx1ZXNPZlQgPSBWYWx1ZXNPZjxUPjtcblxuICBmdW5jdGlvbiBnZXRFdmVudEVtaXR0ZXIocHJvcDogS2V5c09mVCk6IFN1YmplY3Q8VmFsdWVzT2ZUPiB7XG4gICAgaWYgKCFzdWJqZWN0TWFwW3Byb3BdKSB7XG4gICAgICBzdWJqZWN0TWFwW3Byb3BdID0gbmV3IFN1YmplY3Q8VmFsdWVzT2ZUPigpO1xuICAgIH1cbiAgICByZXR1cm4gc3ViamVjdE1hcFtwcm9wXTtcbiAgfVxuICBmdW5jdGlvbiBkaXNwYXRjaCh2YWx1ZTogVmFsdWVzT2ZULCBwcm9wOiBLZXlzT2ZUKSB7XG4gICAgc3ViamVjdE1hcFtwcm9wXSA9IHN1YmplY3RNYXBbcHJvcF0gfHwgbmV3IFN1YmplY3Q8VmFsdWVzT2ZUPigpO1xuICAgIHRyeSB7XG4gICAgICBjb25zdCB2YWwgPVxuICAgICAgICB0cmFuc2Zvcm1zTWFwICYmICh0cmFuc2Zvcm1zTWFwIGFzIGFueSlbcHJvcF1cbiAgICAgICAgICA/ICh0cmFuc2Zvcm1zTWFwIGFzIGFueSlbcHJvcF0odmFsdWUpXG4gICAgICAgICAgOiB2YWx1ZTtcbiAgICAgIHN1YmplY3RNYXBbcHJvcF0ubmV4dCh2YWwpO1xuICAgIH0gY2F0Y2ggKGVycikge1xuICAgICAgZXJyb3JIYW5kbGVyPy5oYW5kbGVFcnJvcihlcnIpO1xuICAgIH1cbiAgfVxuICByZXR1cm4ge1xuICAgIC8vIHNob3J0aGFuZCBzZXR0ZXIgZm9yIG11bHRpcGxlIEV2ZW50RW1pdHRlciBlLmcuIGFjdGlvbnMoe3Byb3BBOiAxLCBwcm9wQjogMn0pXG4gICAgYXBwbHkoXzogUnhBY3Rpb25zPFQsIFU+LCBfXzogYW55LCBwcm9wczogW1RdKTogYW55IHtcbiAgICAgIHByb3BzLmZvckVhY2goKHNsaWNlKSA9PlxuICAgICAgICBPYmplY3QuZW50cmllcyhzbGljZSkuZm9yRWFjaCgoW2ssIHZdKSA9PlxuICAgICAgICAgIGRpc3BhdGNoKHYgYXMgYW55LCBrIGFzIGFueSBhcyBLZXlzT2ZUKVxuICAgICAgICApXG4gICAgICApO1xuICAgIH0sXG4gICAgZ2V0KF8sIHByb3BlcnR5OiBzdHJpbmcpIHtcbiAgICAgIGNvbnN0IHByb3AgPSBwcm9wZXJ0eSBhcyBLZXlzT2ZUO1xuXG4gICAgICAvLyB0aGUgdXNlciB3YW50cyB0byBnZXQgbXVsdGlwbGUgb3Igb25lIHNpbmdsZSBFdmVudEVtaXR0ZXIgYXMgb2JzZXJ2YWJsZSBgZXZlbnRFbWl0dGVyLnByb3AkYFxuICAgICAgaWYgKHByb3AudG9TdHJpbmcoKS5zcGxpdCgnJykucG9wKCkgPT09ICckJykge1xuICAgICAgICAvLyB0aGUgdXNlciB3YW50cyB0byBnZXQgbXVsdGlwbGUgRXZlbnRFbWl0dGVyIGFzIG9ic2VydmFibGUgYGV2ZW50RW1pdHRlci4kKFsncHJvcDEnLCAncHJvcDInXSlgXG4gICAgICAgIGlmIChwcm9wLnRvU3RyaW5nKCkubGVuZ3RoID09PSAxKSB7XG4gICAgICAgICAgcmV0dXJuIChwcm9wczogS2V5c09mVFtdKSA9PlxuICAgICAgICAgICAgbWVyZ2UoXG4gICAgICAgICAgICAgIC4uLnByb3BzLm1hcCgoaykgPT4ge1xuICAgICAgICAgICAgICAgIHJldHVybiBnZXRFdmVudEVtaXR0ZXIoayk7XG4gICAgICAgICAgICAgIH0pXG4gICAgICAgICAgICApO1xuICAgICAgICB9XG4gICAgICAgIC8vIHRoZSB1c2VyIHdhbnRzIHRvIGdldCBhIHNpbmdsZSBFdmVudEVtaXR0ZXIgYXMgb2JzZXJ2YWJsZSBgZXZlbnRFbWl0dGVyLnByb3AkYFxuICAgICAgICBjb25zdCBwcm9wTmFtZSA9IHByb3AudG9TdHJpbmcoKS5zbGljZSgwLCAtMSkgYXMgS2V5c09mVDtcbiAgICAgICAgcmV0dXJuIGdldEV2ZW50RW1pdHRlcihwcm9wTmFtZSk7XG4gICAgICB9XG5cbiAgICAgIC8vIHRoZSB1c2VyIHdhbnRzIHRvIGdldCBhIHNpbmdsZSBFdmVudEVtaXR0ZXIgYW5kIHRyaWdnZXIgYSBzaWRlIGVmZmVjdCBvbiBldmVudCBlbWlzc2lvblxuICAgICAgaWYgKHByb3AudG9TdHJpbmcoKS5zdGFydHNXaXRoKCdvbicpKSB7XG4gICAgICAgIC8vIHdlIG5lZWQgdG8gZmlyc3QgcmVtb3ZlIHRoZSAnb24nIGZyb20gdGhlIHRoZSBwcm9wIG5hbWVcbiAgICAgICAgY29uc3Qgc2xpY2VkUHJvcE5hbWUgPSBwcm9wLnRvU3RyaW5nKCkuc2xpY2UoMik7XG4gICAgICAgIC8vIG5vdyBjb252ZXJ0IHRoZSBzbGljZWRQcm9wTmFtZSB0byBjYW1lbGNhc2VcbiAgICAgICAgY29uc3QgcHJvcE5hbWUgPSAoc2xpY2VkUHJvcE5hbWUuY2hhckF0KDApLnRvTG93ZXJDYXNlKCkgK1xuICAgICAgICAgIHNsaWNlZFByb3BOYW1lLnNsaWNlKDEpKSBhcyBLZXlzT2ZUO1xuICAgICAgICByZXR1cm4gKFxuICAgICAgICAgIGJlaGF2aW91cjogT3BlcmF0b3JGdW5jdGlvbjxUW0tleXNPZlRdLCBUW0tleXNPZlRdPixcbiAgICAgICAgICBzZjogKHY6IFRbS2V5c09mVF0pID0+IHZvaWRcbiAgICAgICAgKSA9PiB7XG4gICAgICAgICAgY29uc3Qgc3ViID0gZ2V0RXZlbnRFbWl0dGVyKHByb3BOYW1lKS5waXBlKGJlaGF2aW91cikuc3Vic2NyaWJlKHNmKTtcbiAgICAgICAgICBlZmZlY3RNYXBbcHJvcE5hbWVdID0gc3ViO1xuICAgICAgICAgIHJldHVybiAoKSA9PiBzdWIudW5zdWJzY3JpYmUoKTtcbiAgICAgICAgfTtcbiAgICAgIH1cblxuICAgICAgLy8gdGhlIHVzZXIgd2FudHMgdG8gZ2V0IGEgZGlzcGF0Y2hlciBmdW5jdGlvbiB0byBpbXBlcmF0aXZlbHkgZGlzcGF0Y2ggdGhlIEV2ZW50RW1pdHRlclxuICAgICAgcmV0dXJuIChhcmdzOiBWYWx1ZXNPZlQpID0+IHtcbiAgICAgICAgZGlzcGF0Y2goYXJncywgcHJvcCk7XG4gICAgICB9O1xuICAgIH0sXG4gICAgc2V0KCkge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKCdObyBzZXR0ZXJzIGF2YWlsYWJsZS4gVG8gZW1pdCBjYWxsIHRoZSBwcm9wZXJ0eSBuYW1lLicpO1xuICAgIH0sXG4gIH07XG59XG4iXX0=