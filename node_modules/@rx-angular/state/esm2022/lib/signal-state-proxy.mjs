import { DestroyRef, inject, signal, } from '@angular/core';
import { takeUntilDestroyed } from '@angular/core/rxjs-interop';
import { select } from '@rx-angular/state/selections';
export function createSignalStateProxy(state$, stateFn) {
    const destroyRef = inject(DestroyRef);
    const signalState = {};
    return new Proxy(signalState, {
        get(target, p) {
            let _signal = target[p];
            if (!_signal) {
                const val = stateFn(p);
                _signal = signal(val);
                target[p] = _signal;
                state$
                    .pipe(select(p), takeUntilDestroyed(destroyRef))
                    .subscribe((val) => _signal.set(val));
            }
            return _signal;
        },
        has(target, prop) {
            return !!target[prop];
        },
        ownKeys(target) {
            return [...Reflect.ownKeys(target)];
        },
        getOwnPropertyDescriptor(target, key) {
            return {
                enumerable: true,
                configurable: true,
            };
        },
        set() {
            return true;
        },
    });
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2lnbmFsLXN0YXRlLXByb3h5LmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vLi4vbGlicy9zdGF0ZS9zcmMvbGliL3NpZ25hbC1zdGF0ZS1wcm94eS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQ0wsVUFBVSxFQUNWLE1BQU0sRUFFTixNQUFNLEdBRVAsTUFBTSxlQUFlLENBQUM7QUFDdkIsT0FBTyxFQUFFLGtCQUFrQixFQUFFLE1BQU0sNEJBQTRCLENBQUM7QUFDaEUsT0FBTyxFQUFFLE1BQU0sRUFBRSxNQUFNLDhCQUE4QixDQUFDO0FBT3RELE1BQU0sVUFBVSxzQkFBc0IsQ0FDcEMsTUFBeUIsRUFDekIsT0FBa0Q7SUFFbEQsTUFBTSxVQUFVLEdBQUcsTUFBTSxDQUFDLFVBQVUsQ0FBQyxDQUFDO0lBRXRDLE1BQU0sV0FBVyxHQUFHLEVBQTZCLENBQUM7SUFDbEQsT0FBTyxJQUFJLEtBQUssQ0FBMEIsV0FBVyxFQUFFO1FBQ3JELEdBQUcsQ0FDRCxNQUErQixFQUMvQixDQUFzQjtZQUV0QixJQUFJLE9BQU8sR0FBRyxNQUFNLENBQUMsQ0FBTSxDQUFDLENBQUM7WUFDN0IsSUFBSSxDQUFDLE9BQU8sRUFBRSxDQUFDO2dCQUNiLE1BQU0sR0FBRyxHQUFHLE9BQU8sQ0FBQyxDQUFNLENBQUMsQ0FBQztnQkFDNUIsT0FBTyxHQUFHLE1BQU0sQ0FBQyxHQUFHLENBQUMsQ0FBQztnQkFDdEIsTUFBTSxDQUFDLENBQU0sQ0FBQyxHQUFHLE9BQU8sQ0FBQztnQkFDekIsTUFBTTtxQkFDSCxJQUFJLENBQUMsTUFBTSxDQUFDLENBQU0sQ0FBQyxFQUFFLGtCQUFrQixDQUFDLFVBQVUsQ0FBQyxDQUFDO3FCQUNwRCxTQUFTLENBQUMsQ0FBQyxHQUFHLEVBQUUsRUFBRSxDQUFFLE9BQW9DLENBQUMsR0FBRyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUM7WUFDeEUsQ0FBQztZQUNELE9BQU8sT0FBTyxDQUFDO1FBQ2pCLENBQUM7UUFDRCxHQUFHLENBQ0QsTUFBK0IsRUFDL0IsSUFBeUI7WUFFekIsT0FBTyxDQUFDLENBQUMsTUFBTSxDQUFDLElBQVMsQ0FBQyxDQUFDO1FBQzdCLENBQUM7UUFDRCxPQUFPLENBQUMsTUFBTTtZQUNaLE9BQU8sQ0FBQyxHQUFHLE9BQU8sQ0FBQyxPQUFPLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQztRQUN0QyxDQUFDO1FBQ0Qsd0JBQXdCLENBQUMsTUFBTSxFQUFFLEdBQUc7WUFDbEMsT0FBTztnQkFDTCxVQUFVLEVBQUUsSUFBSTtnQkFDaEIsWUFBWSxFQUFFLElBQUk7YUFDbkIsQ0FBQztRQUNKLENBQUM7UUFDRCxHQUFHO1lBQ0QsT0FBTyxJQUFJLENBQUM7UUFDZCxDQUFDO0tBQ0YsQ0FBQyxDQUFDO0FBQ0wsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7XG4gIERlc3Ryb3lSZWYsXG4gIGluamVjdCxcbiAgU2lnbmFsLFxuICBzaWduYWwsXG4gIFdyaXRhYmxlU2lnbmFsLFxufSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IHRha2VVbnRpbERlc3Ryb3llZCB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUvcnhqcy1pbnRlcm9wJztcbmltcG9ydCB7IHNlbGVjdCB9IGZyb20gJ0ByeC1hbmd1bGFyL3N0YXRlL3NlbGVjdGlvbnMnO1xuaW1wb3J0IHsgT2JzZXJ2YWJsZSB9IGZyb20gJ3J4anMnO1xuXG5leHBvcnQgdHlwZSBTaWduYWxTdGF0ZVByb3h5PFN0YXRlIGV4dGVuZHMgb2JqZWN0PiA9IHtcbiAgW0sgaW4ga2V5b2YgU3RhdGVdOiBTaWduYWw8U3RhdGVbS10+O1xufTtcblxuZXhwb3J0IGZ1bmN0aW9uIGNyZWF0ZVNpZ25hbFN0YXRlUHJveHk8U3RhdGUgZXh0ZW5kcyBvYmplY3Q+KFxuICBzdGF0ZSQ6IE9ic2VydmFibGU8U3RhdGU+LFxuICBzdGF0ZUZuOiA8SyBleHRlbmRzIGtleW9mIFN0YXRlPihrOiBLKSA9PiBTdGF0ZVtLXVxuKSB7XG4gIGNvbnN0IGRlc3Ryb3lSZWYgPSBpbmplY3QoRGVzdHJveVJlZik7XG5cbiAgY29uc3Qgc2lnbmFsU3RhdGUgPSB7fSBhcyBTaWduYWxTdGF0ZVByb3h5PFN0YXRlPjtcbiAgcmV0dXJuIG5ldyBQcm94eTxTaWduYWxTdGF0ZVByb3h5PFN0YXRlPj4oc2lnbmFsU3RhdGUsIHtcbiAgICBnZXQ8SyBleHRlbmRzIGtleW9mIFN0YXRlPihcbiAgICAgIHRhcmdldDogU2lnbmFsU3RhdGVQcm94eTxTdGF0ZT4sXG4gICAgICBwOiBLIHwgc3RyaW5nIHwgc3ltYm9sXG4gICAgKTogU2lnbmFsPFN0YXRlW0tdPiB7XG4gICAgICBsZXQgX3NpZ25hbCA9IHRhcmdldFtwIGFzIEtdO1xuICAgICAgaWYgKCFfc2lnbmFsKSB7XG4gICAgICAgIGNvbnN0IHZhbCA9IHN0YXRlRm4ocCBhcyBLKTtcbiAgICAgICAgX3NpZ25hbCA9IHNpZ25hbCh2YWwpO1xuICAgICAgICB0YXJnZXRbcCBhcyBLXSA9IF9zaWduYWw7XG4gICAgICAgIHN0YXRlJFxuICAgICAgICAgIC5waXBlKHNlbGVjdChwIGFzIEspLCB0YWtlVW50aWxEZXN0cm95ZWQoZGVzdHJveVJlZikpXG4gICAgICAgICAgLnN1YnNjcmliZSgodmFsKSA9PiAoX3NpZ25hbCBhcyBXcml0YWJsZVNpZ25hbDxTdGF0ZVtLXT4pLnNldCh2YWwpKTtcbiAgICAgIH1cbiAgICAgIHJldHVybiBfc2lnbmFsO1xuICAgIH0sXG4gICAgaGFzPEsgZXh0ZW5kcyBrZXlvZiBTdGF0ZT4oXG4gICAgICB0YXJnZXQ6IFNpZ25hbFN0YXRlUHJveHk8U3RhdGU+LFxuICAgICAgcHJvcDogSyB8IHN0cmluZyB8IHN5bWJvbFxuICAgICkge1xuICAgICAgcmV0dXJuICEhdGFyZ2V0W3Byb3AgYXMgS107XG4gICAgfSxcbiAgICBvd25LZXlzKHRhcmdldCkge1xuICAgICAgcmV0dXJuIFsuLi5SZWZsZWN0Lm93bktleXModGFyZ2V0KV07XG4gICAgfSxcbiAgICBnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IodGFyZ2V0LCBrZXkpIHtcbiAgICAgIHJldHVybiB7XG4gICAgICAgIGVudW1lcmFibGU6IHRydWUsXG4gICAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZSxcbiAgICAgIH07XG4gICAgfSxcbiAgICBzZXQoKTogYm9vbGVhbiB7XG4gICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9LFxuICB9KTtcbn1cbiJdfQ==