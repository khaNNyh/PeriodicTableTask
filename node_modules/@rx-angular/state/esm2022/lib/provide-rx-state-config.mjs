import { InjectionToken } from '@angular/core';
import { defaultAccumulator, } from '@rx-angular/state/selections';
import { queueScheduler } from 'rxjs';
/**
 * Injection token for the default accumulator function.
 *
 * @example
 * providers: [
 *  {
 *   provide: RX_ACCUMULATOR_FN,
 *   useValue: (state, slice) => ({ ...state, ...slice })
 *  }
 * ]
 */
export const RX_ACCUMULATOR_FN = new InjectionToken('RX_ACCUMULATOR_FN', {
    providedIn: 'root',
    factory: () => defaultAccumulator,
});
/**
 * Provider function to specify a custom `AccumulationFn` for `RxState` to use.
 * @param fn
 */
export function withAccumulatorFn(fn) {
    return {
        kind: 'Accumulator',
        providers: [{ provide: RX_ACCUMULATOR_FN, useValue: fn }],
    };
}
/**
 * Injection token for the default state scheduler
 *
 * @example
 * providers: [
 *  {
 *   provide: RX_STATE_SCHEDULER,
 *   useValue: asapScheduler
 *  }
 * ]
 */
export const RX_STATE_SCHEDULER = new InjectionToken('RX_STATE_SCHEDULER', {
    providedIn: 'root',
    factory: () => queueScheduler,
});
/**
 * Provider function to specify a scheduler for `RxState` to perform state updates & emit new values.
 * @param scheduler
 */
export function withScheduler(scheduler) {
    return {
        kind: 'Scheduler',
        providers: [{ provide: RX_STATE_SCHEDULER, useValue: scheduler }],
    };
}
/**
 * Provider function to specify synchronous (no) scheduling for `RxState`. The state computations
 * will be fully synchronous instead of using the default `queueScheduler`
 */
export function withSyncScheduler() {
    return {
        kind: 'Scheduler',
        providers: [{ provide: RX_STATE_SCHEDULER, useValue: 'sync' }],
    };
}
/**
 * This function is used to provide the configuration for the rxState function.
 *
 * You can provide multiple configurations at once.
 *
 * You can use these functions to provide the configuration:
 * - withAccumulatorFn - to provide a custom accumulator function
 * - withScheduler - to provide a custom scheduler
 *
 */
export function provideRxStateConfig(...configs) {
    return flatten(configs.map((c) => c.providers));
}
function flatten(arr) {
    return arr.reduce((acc, val) => acc.concat(val), []);
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicHJvdmlkZS1yeC1zdGF0ZS1jb25maWcuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi9saWJzL3N0YXRlL3NyYy9saWIvcHJvdmlkZS1yeC1zdGF0ZS1jb25maWcudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUFFLGNBQWMsRUFBWSxNQUFNLGVBQWUsQ0FBQztBQUN6RCxPQUFPLEVBRUwsa0JBQWtCLEdBQ25CLE1BQU0sOEJBQThCLENBQUM7QUFDdEMsT0FBTyxFQUFFLGNBQWMsRUFBaUIsTUFBTSxNQUFNLENBQUM7QUFTckQ7Ozs7Ozs7Ozs7R0FVRztBQUNILE1BQU0sQ0FBQyxNQUFNLGlCQUFpQixHQUFHLElBQUksY0FBYyxDQUNqRCxtQkFBbUIsRUFDbkI7SUFDRSxVQUFVLEVBQUUsTUFBTTtJQUNsQixPQUFPLEVBQUUsR0FBRyxFQUFFLENBQUMsa0JBQWtCO0NBQ2xDLENBQ0YsQ0FBQztBQUVGOzs7R0FHRztBQUNILE1BQU0sVUFBVSxpQkFBaUIsQ0FBQyxFQUFrQjtJQUNsRCxPQUFPO1FBQ0wsSUFBSSxFQUFFLGFBQWE7UUFDbkIsU0FBUyxFQUFFLENBQUMsRUFBRSxPQUFPLEVBQUUsaUJBQWlCLEVBQUUsUUFBUSxFQUFFLEVBQUUsRUFBRSxDQUFDO0tBQzFELENBQUM7QUFDSixDQUFDO0FBRUQ7Ozs7Ozs7Ozs7R0FVRztBQUNILE1BQU0sQ0FBQyxNQUFNLGtCQUFrQixHQUFHLElBQUksY0FBYyxDQUNsRCxvQkFBb0IsRUFDcEI7SUFDRSxVQUFVLEVBQUUsTUFBTTtJQUNsQixPQUFPLEVBQUUsR0FBRyxFQUFFLENBQUMsY0FBYztDQUM5QixDQUNGLENBQUM7QUFFRjs7O0dBR0c7QUFDSCxNQUFNLFVBQVUsYUFBYSxDQUMzQixTQUFpQztJQUVqQyxPQUFPO1FBQ0wsSUFBSSxFQUFFLFdBQVc7UUFDakIsU0FBUyxFQUFFLENBQUMsRUFBRSxPQUFPLEVBQUUsa0JBQWtCLEVBQUUsUUFBUSxFQUFFLFNBQVMsRUFBRSxDQUFDO0tBQ2xFLENBQUM7QUFDSixDQUFDO0FBRUQ7OztHQUdHO0FBQ0gsTUFBTSxVQUFVLGlCQUFpQjtJQUMvQixPQUFPO1FBQ0wsSUFBSSxFQUFFLFdBQVc7UUFDakIsU0FBUyxFQUFFLENBQUMsRUFBRSxPQUFPLEVBQUUsa0JBQWtCLEVBQUUsUUFBUSxFQUFFLE1BQU0sRUFBRSxDQUFDO0tBQy9ELENBQUM7QUFDSixDQUFDO0FBRUQ7Ozs7Ozs7OztHQVNHO0FBQ0gsTUFBTSxVQUFVLG9CQUFvQixDQUNsQyxHQUFHLE9BQTBCO0lBRTdCLE9BQU8sT0FBTyxDQUFDLE9BQU8sQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLEVBQUUsRUFBRSxDQUFDLENBQUMsQ0FBQyxTQUFTLENBQUMsQ0FBQyxDQUFDO0FBQ2xELENBQUM7QUFFRCxTQUFTLE9BQU8sQ0FBSSxHQUFVO0lBQzVCLE9BQU8sR0FBRyxDQUFDLE1BQU0sQ0FBQyxDQUFDLEdBQUcsRUFBRSxHQUFHLEVBQUUsRUFBRSxDQUFDLEdBQUcsQ0FBQyxNQUFNLENBQUMsR0FBRyxDQUFDLEVBQUUsRUFBRSxDQUFDLENBQUM7QUFDdkQsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEluamVjdGlvblRva2VuLCBQcm92aWRlciB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHtcbiAgQWNjdW11bGF0aW9uRm4sXG4gIGRlZmF1bHRBY2N1bXVsYXRvcixcbn0gZnJvbSAnQHJ4LWFuZ3VsYXIvc3RhdGUvc2VsZWN0aW9ucyc7XG5pbXBvcnQgeyBxdWV1ZVNjaGVkdWxlciwgU2NoZWR1bGVyTGlrZSB9IGZyb20gJ3J4anMnO1xuXG5leHBvcnQgdHlwZSBSWF9TVEFURV9DT05GSUdTID0gJ0FjY3VtdWxhdG9yJyB8ICdTY2hlZHVsZXInO1xuXG5pbnRlcmZhY2UgUnhTdGF0ZUNvbmZpZ0ZuIHtcbiAga2luZDogUlhfU1RBVEVfQ09ORklHUztcbiAgcHJvdmlkZXJzOiBQcm92aWRlcltdO1xufVxuXG4vKipcbiAqIEluamVjdGlvbiB0b2tlbiBmb3IgdGhlIGRlZmF1bHQgYWNjdW11bGF0b3IgZnVuY3Rpb24uXG4gKlxuICogQGV4YW1wbGVcbiAqIHByb3ZpZGVyczogW1xuICogIHtcbiAqICAgcHJvdmlkZTogUlhfQUNDVU1VTEFUT1JfRk4sXG4gKiAgIHVzZVZhbHVlOiAoc3RhdGUsIHNsaWNlKSA9PiAoeyAuLi5zdGF0ZSwgLi4uc2xpY2UgfSlcbiAqICB9XG4gKiBdXG4gKi9cbmV4cG9ydCBjb25zdCBSWF9BQ0NVTVVMQVRPUl9GTiA9IG5ldyBJbmplY3Rpb25Ub2tlbjxBY2N1bXVsYXRpb25Gbj4oXG4gICdSWF9BQ0NVTVVMQVRPUl9GTicsXG4gIHtcbiAgICBwcm92aWRlZEluOiAncm9vdCcsXG4gICAgZmFjdG9yeTogKCkgPT4gZGVmYXVsdEFjY3VtdWxhdG9yLFxuICB9LFxuKTtcblxuLyoqXG4gKiBQcm92aWRlciBmdW5jdGlvbiB0byBzcGVjaWZ5IGEgY3VzdG9tIGBBY2N1bXVsYXRpb25GbmAgZm9yIGBSeFN0YXRlYCB0byB1c2UuXG4gKiBAcGFyYW0gZm5cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIHdpdGhBY2N1bXVsYXRvckZuKGZuOiBBY2N1bXVsYXRpb25Gbik6IFJ4U3RhdGVDb25maWdGbiB7XG4gIHJldHVybiB7XG4gICAga2luZDogJ0FjY3VtdWxhdG9yJyxcbiAgICBwcm92aWRlcnM6IFt7IHByb3ZpZGU6IFJYX0FDQ1VNVUxBVE9SX0ZOLCB1c2VWYWx1ZTogZm4gfV0sXG4gIH07XG59XG5cbi8qKlxuICogSW5qZWN0aW9uIHRva2VuIGZvciB0aGUgZGVmYXVsdCBzdGF0ZSBzY2hlZHVsZXJcbiAqXG4gKiBAZXhhbXBsZVxuICogcHJvdmlkZXJzOiBbXG4gKiAge1xuICogICBwcm92aWRlOiBSWF9TVEFURV9TQ0hFRFVMRVIsXG4gKiAgIHVzZVZhbHVlOiBhc2FwU2NoZWR1bGVyXG4gKiAgfVxuICogXVxuICovXG5leHBvcnQgY29uc3QgUlhfU1RBVEVfU0NIRURVTEVSID0gbmV3IEluamVjdGlvblRva2VuPFNjaGVkdWxlckxpa2UgfCAnc3luYyc+KFxuICAnUlhfU1RBVEVfU0NIRURVTEVSJyxcbiAge1xuICAgIHByb3ZpZGVkSW46ICdyb290JyxcbiAgICBmYWN0b3J5OiAoKSA9PiBxdWV1ZVNjaGVkdWxlcixcbiAgfSxcbik7XG5cbi8qKlxuICogUHJvdmlkZXIgZnVuY3Rpb24gdG8gc3BlY2lmeSBhIHNjaGVkdWxlciBmb3IgYFJ4U3RhdGVgIHRvIHBlcmZvcm0gc3RhdGUgdXBkYXRlcyAmIGVtaXQgbmV3IHZhbHVlcy5cbiAqIEBwYXJhbSBzY2hlZHVsZXJcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIHdpdGhTY2hlZHVsZXIoXG4gIHNjaGVkdWxlcjogU2NoZWR1bGVyTGlrZSB8ICdzeW5jJyxcbik6IFJ4U3RhdGVDb25maWdGbiB7XG4gIHJldHVybiB7XG4gICAga2luZDogJ1NjaGVkdWxlcicsXG4gICAgcHJvdmlkZXJzOiBbeyBwcm92aWRlOiBSWF9TVEFURV9TQ0hFRFVMRVIsIHVzZVZhbHVlOiBzY2hlZHVsZXIgfV0sXG4gIH07XG59XG5cbi8qKlxuICogUHJvdmlkZXIgZnVuY3Rpb24gdG8gc3BlY2lmeSBzeW5jaHJvbm91cyAobm8pIHNjaGVkdWxpbmcgZm9yIGBSeFN0YXRlYC4gVGhlIHN0YXRlIGNvbXB1dGF0aW9uc1xuICogd2lsbCBiZSBmdWxseSBzeW5jaHJvbm91cyBpbnN0ZWFkIG9mIHVzaW5nIHRoZSBkZWZhdWx0IGBxdWV1ZVNjaGVkdWxlcmBcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIHdpdGhTeW5jU2NoZWR1bGVyKCk6IFJ4U3RhdGVDb25maWdGbiB7XG4gIHJldHVybiB7XG4gICAga2luZDogJ1NjaGVkdWxlcicsXG4gICAgcHJvdmlkZXJzOiBbeyBwcm92aWRlOiBSWF9TVEFURV9TQ0hFRFVMRVIsIHVzZVZhbHVlOiAnc3luYycgfV0sXG4gIH07XG59XG5cbi8qKlxuICogVGhpcyBmdW5jdGlvbiBpcyB1c2VkIHRvIHByb3ZpZGUgdGhlIGNvbmZpZ3VyYXRpb24gZm9yIHRoZSByeFN0YXRlIGZ1bmN0aW9uLlxuICpcbiAqIFlvdSBjYW4gcHJvdmlkZSBtdWx0aXBsZSBjb25maWd1cmF0aW9ucyBhdCBvbmNlLlxuICpcbiAqIFlvdSBjYW4gdXNlIHRoZXNlIGZ1bmN0aW9ucyB0byBwcm92aWRlIHRoZSBjb25maWd1cmF0aW9uOlxuICogLSB3aXRoQWNjdW11bGF0b3JGbiAtIHRvIHByb3ZpZGUgYSBjdXN0b20gYWNjdW11bGF0b3IgZnVuY3Rpb25cbiAqIC0gd2l0aFNjaGVkdWxlciAtIHRvIHByb3ZpZGUgYSBjdXN0b20gc2NoZWR1bGVyXG4gKlxuICovXG5leHBvcnQgZnVuY3Rpb24gcHJvdmlkZVJ4U3RhdGVDb25maWcoXG4gIC4uLmNvbmZpZ3M6IFJ4U3RhdGVDb25maWdGbltdXG4pOiBQcm92aWRlcltdIHtcbiAgcmV0dXJuIGZsYXR0ZW4oY29uZmlncy5tYXAoKGMpID0+IGMucHJvdmlkZXJzKSk7XG59XG5cbmZ1bmN0aW9uIGZsYXR0ZW48VD4oYXJyOiBUW11bXSk6IFRbXSB7XG4gIHJldHVybiBhcnIucmVkdWNlKChhY2MsIHZhbCkgPT4gYWNjLmNvbmNhdCh2YWwpLCBbXSk7XG59XG4iXX0=