import { assertInInjectionContext, DestroyRef, inject } from '@angular/core';
import { RxState as LegacyState } from './rx-state.service';
/**
 * @description
 * Functional way to setup state management with RxState. It's a wrapper around RxState that automatically get
 *   destroyed.
 *
 * @example
 * ```ts
 * import { rxState } from '@rx-angular/state';
 *
 * Component({})
 * export class FooComponent {
 *  readonly state = rxState<{ count: number }>(({ set }) => set({ count: 0 }));
 * }
 * ```
 *
 * @param setupFn
 * @returns RxState instance
 *
 *
 *
 * @docsCategory RxState
 * @docsPage RxState
 *
 */
export function rxState(setupFn) {
    assertInInjectionContext(rxState);
    const legacyState = new LegacyState();
    const destroyRef = inject(DestroyRef);
    destroyRef.onDestroy(() => legacyState.ngOnDestroy());
    const state = {
        get: legacyState.get.bind(legacyState),
        set: legacyState.set.bind(legacyState),
        connect: legacyState.connect.bind(legacyState),
        select: legacyState.select.bind(legacyState),
        signal: legacyState.signal.bind(legacyState),
        computed: legacyState.computed.bind(legacyState),
        computedFrom: legacyState.computedFrom.bind(legacyState),
        $: legacyState.$,
        setAccumulator: legacyState.setAccumulator.bind(legacyState),
    };
    setupFn?.(state);
    return state;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicngtc3RhdGUuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi9saWJzL3N0YXRlL3NyYy9saWIvcngtc3RhdGUudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUFFLHdCQUF3QixFQUFFLFVBQVUsRUFBRSxNQUFNLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFDN0UsT0FBTyxFQUFFLE9BQU8sSUFBSSxXQUFXLEVBQUUsTUFBTSxvQkFBb0IsQ0FBQztBQXNCNUQ7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0dBdUJHO0FBQ0gsTUFBTSxVQUFVLE9BQU8sQ0FDckIsT0FBK0I7SUFFL0Isd0JBQXdCLENBQUMsT0FBTyxDQUFDLENBQUM7SUFFbEMsTUFBTSxXQUFXLEdBQUcsSUFBSSxXQUFXLEVBQVMsQ0FBQztJQUM3QyxNQUFNLFVBQVUsR0FBRyxNQUFNLENBQUMsVUFBVSxDQUFDLENBQUM7SUFFdEMsVUFBVSxDQUFDLFNBQVMsQ0FBQyxHQUFHLEVBQUUsQ0FBQyxXQUFXLENBQUMsV0FBVyxFQUFFLENBQUMsQ0FBQztJQUV0RCxNQUFNLEtBQUssR0FBbUI7UUFDNUIsR0FBRyxFQUFFLFdBQVcsQ0FBQyxHQUFHLENBQUMsSUFBSSxDQUFDLFdBQVcsQ0FBQztRQUN0QyxHQUFHLEVBQUUsV0FBVyxDQUFDLEdBQUcsQ0FBQyxJQUFJLENBQUMsV0FBVyxDQUFDO1FBQ3RDLE9BQU8sRUFBRSxXQUFXLENBQUMsT0FBTyxDQUFDLElBQUksQ0FBQyxXQUFXLENBQUM7UUFDOUMsTUFBTSxFQUFFLFdBQVcsQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDLFdBQVcsQ0FBQztRQUM1QyxNQUFNLEVBQUUsV0FBVyxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUMsV0FBVyxDQUFDO1FBQzVDLFFBQVEsRUFBRSxXQUFXLENBQUMsUUFBUSxDQUFDLElBQUksQ0FBQyxXQUFXLENBQUM7UUFDaEQsWUFBWSxFQUFFLFdBQVcsQ0FBQyxZQUFZLENBQUMsSUFBSSxDQUFDLFdBQVcsQ0FBQztRQUN4RCxDQUFDLEVBQUUsV0FBVyxDQUFDLENBQUM7UUFDaEIsY0FBYyxFQUFFLFdBQVcsQ0FBQyxjQUFjLENBQUMsSUFBSSxDQUFDLFdBQVcsQ0FBQztLQUM3RCxDQUFDO0lBRUYsT0FBTyxFQUFFLENBQUMsS0FBSyxDQUFDLENBQUM7SUFFakIsT0FBTyxLQUFLLENBQUM7QUFDZixDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgYXNzZXJ0SW5JbmplY3Rpb25Db250ZXh0LCBEZXN0cm95UmVmLCBpbmplY3QgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IFJ4U3RhdGUgYXMgTGVnYWN5U3RhdGUgfSBmcm9tICcuL3J4LXN0YXRlLnNlcnZpY2UnO1xuXG5leHBvcnQgdHlwZSBSeFN0YXRlPFQgZXh0ZW5kcyBvYmplY3Q+ID0gUGljazxcbiAgTGVnYWN5U3RhdGU8VD4sXG4gIHwgJ2dldCdcbiAgfCAnc2VsZWN0J1xuICB8ICdjb25uZWN0J1xuICB8ICdzZXQnXG4gIHwgJyQnXG4gIHwgJ3NldEFjY3VtdWxhdG9yJ1xuICB8ICdzaWduYWwnXG4gIHwgJ2NvbXB1dGVkJ1xuICB8ICdjb21wdXRlZEZyb20nXG4+O1xuXG5leHBvcnQgdHlwZSBSeFN0YXRlU2V0dXBGbjxTdGF0ZSBleHRlbmRzIG9iamVjdD4gPSAoXG4gIHJ4U3RhdGU6IFBpY2s8XG4gICAgUnhTdGF0ZTxTdGF0ZT4sXG4gICAgJ2Nvbm5lY3QnIHwgJ3NldCcgfCAnZ2V0JyB8ICdzZWxlY3QnIHwgJ3NldEFjY3VtdWxhdG9yJ1xuICA+XG4pID0+IHZvaWQ7XG5cbi8qKlxuICogQGRlc2NyaXB0aW9uXG4gKiBGdW5jdGlvbmFsIHdheSB0byBzZXR1cCBzdGF0ZSBtYW5hZ2VtZW50IHdpdGggUnhTdGF0ZS4gSXQncyBhIHdyYXBwZXIgYXJvdW5kIFJ4U3RhdGUgdGhhdCBhdXRvbWF0aWNhbGx5IGdldFxuICogICBkZXN0cm95ZWQuXG4gKlxuICogQGV4YW1wbGVcbiAqIGBgYHRzXG4gKiBpbXBvcnQgeyByeFN0YXRlIH0gZnJvbSAnQHJ4LWFuZ3VsYXIvc3RhdGUnO1xuICpcbiAqIENvbXBvbmVudCh7fSlcbiAqIGV4cG9ydCBjbGFzcyBGb29Db21wb25lbnQge1xuICogIHJlYWRvbmx5IHN0YXRlID0gcnhTdGF0ZTx7IGNvdW50OiBudW1iZXIgfT4oKHsgc2V0IH0pID0+IHNldCh7IGNvdW50OiAwIH0pKTtcbiAqIH1cbiAqIGBgYFxuICpcbiAqIEBwYXJhbSBzZXR1cEZuXG4gKiBAcmV0dXJucyBSeFN0YXRlIGluc3RhbmNlXG4gKlxuICpcbiAqXG4gKiBAZG9jc0NhdGVnb3J5IFJ4U3RhdGVcbiAqIEBkb2NzUGFnZSBSeFN0YXRlXG4gKlxuICovXG5leHBvcnQgZnVuY3Rpb24gcnhTdGF0ZTxTdGF0ZSBleHRlbmRzIG9iamVjdD4oXG4gIHNldHVwRm4/OiBSeFN0YXRlU2V0dXBGbjxTdGF0ZT5cbik6IFJ4U3RhdGU8U3RhdGU+IHtcbiAgYXNzZXJ0SW5JbmplY3Rpb25Db250ZXh0KHJ4U3RhdGUpO1xuXG4gIGNvbnN0IGxlZ2FjeVN0YXRlID0gbmV3IExlZ2FjeVN0YXRlPFN0YXRlPigpO1xuICBjb25zdCBkZXN0cm95UmVmID0gaW5qZWN0KERlc3Ryb3lSZWYpO1xuXG4gIGRlc3Ryb3lSZWYub25EZXN0cm95KCgpID0+IGxlZ2FjeVN0YXRlLm5nT25EZXN0cm95KCkpO1xuXG4gIGNvbnN0IHN0YXRlOiBSeFN0YXRlPFN0YXRlPiA9IHtcbiAgICBnZXQ6IGxlZ2FjeVN0YXRlLmdldC5iaW5kKGxlZ2FjeVN0YXRlKSxcbiAgICBzZXQ6IGxlZ2FjeVN0YXRlLnNldC5iaW5kKGxlZ2FjeVN0YXRlKSxcbiAgICBjb25uZWN0OiBsZWdhY3lTdGF0ZS5jb25uZWN0LmJpbmQobGVnYWN5U3RhdGUpLFxuICAgIHNlbGVjdDogbGVnYWN5U3RhdGUuc2VsZWN0LmJpbmQobGVnYWN5U3RhdGUpLFxuICAgIHNpZ25hbDogbGVnYWN5U3RhdGUuc2lnbmFsLmJpbmQobGVnYWN5U3RhdGUpLFxuICAgIGNvbXB1dGVkOiBsZWdhY3lTdGF0ZS5jb21wdXRlZC5iaW5kKGxlZ2FjeVN0YXRlKSxcbiAgICBjb21wdXRlZEZyb206IGxlZ2FjeVN0YXRlLmNvbXB1dGVkRnJvbS5iaW5kKGxlZ2FjeVN0YXRlKSxcbiAgICAkOiBsZWdhY3lTdGF0ZS4kLFxuICAgIHNldEFjY3VtdWxhdG9yOiBsZWdhY3lTdGF0ZS5zZXRBY2N1bXVsYXRvci5iaW5kKGxlZ2FjeVN0YXRlKSxcbiAgfTtcblxuICBzZXR1cEZuPy4oc3RhdGUpO1xuXG4gIHJldHVybiBzdGF0ZTtcbn1cbiJdfQ==