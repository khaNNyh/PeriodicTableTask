import { Directive, inject, Input, } from '@angular/core';
import { coalesceWith } from '@rx-angular/cdk/coalescing';
import { combineLatest, ReplaySubject, Subject, } from 'rxjs';
import { distinctUntilChanged, filter, map, shareReplay, startWith, switchMap, takeUntil, tap, } from 'rxjs/operators';
import { RxVirtualScrollStrategy, } from '../model';
import { calculateVisibleContainerSize, parseScrollTopBoundaries, toBoolean, unpatchedMicroTask, } from '../util';
import { DEFAULT_ITEM_SIZE, DEFAULT_RUNWAY_ITEMS, DEFAULT_RUNWAY_ITEMS_OPPOSITE, RX_VIRTUAL_SCROLL_DEFAULT_OPTIONS, } from '../virtual-scroll.config';
import * as i0 from "@angular/core";
const defaultItemSize = () => DEFAULT_ITEM_SIZE;
/**
 * @Directive DynamicSizeVirtualScrollStrategy
 *
 * @description
 *
 * The `DynamicSizeVirtualScrollStrategy` is very similar to the `AutosizeVirtualScrollStrategy`.
 * It positions items based on a function determining its size.
 *
 * @docsCategory RxVirtualFor
 * @docsPage RxVirtualFor
 * @publicApi
 */
export class DynamicSizeVirtualScrollStrategy extends RxVirtualScrollStrategy {
    defaults = inject(RX_VIRTUAL_SCROLL_DEFAULT_OPTIONS, {
        optional: true,
    });
    /**
     * @description
     * The amount of items to render upfront in scroll direction
     */
    runwayItems = this.defaults?.runwayItems ?? DEFAULT_RUNWAY_ITEMS;
    /**
     * @description
     * The amount of items to render upfront in reverse scroll direction
     */
    runwayItemsOpposite = this.defaults?.runwayItemsOpposite ?? DEFAULT_RUNWAY_ITEMS_OPPOSITE;
    /**
     * @description
     * When enabled, the scroll strategy stops removing views from the viewport,
     * instead it only adds views. This setting can be changed on the fly. Views will be added in both directions
     * according to the user interactions.
     */
    appendOnly = false;
    /**
     * @description
     * If this flag is true, the virtual scroll strategy maintains the scrolled item when new data
     * is prepended to the list. This is very useful when implementing a reversed infinite scroller, that prepends
     * data instead of appending it
     */
    keepScrolledIndexOnPrepend = false;
    /**
     * @description
     * Function returning the size of an item
     */
    set itemSize(fn) {
        if (fn) {
            this._itemSizeFn = fn;
        }
    }
    get itemSize() {
        return this._itemSizeFn;
    }
    _itemSizeFn = defaultItemSize;
    /** @internal */
    waitForScroll = false;
    /** @internal */
    isStable$ = new ReplaySubject(1);
    /** @internal */
    get isStable() {
        return this.isStable$.pipe(filter((w) => w));
    }
    /** @internal */
    viewport = null;
    /** @internal */
    viewRepeater = null;
    /** @internal */
    _contentSize$ = new ReplaySubject(1);
    /** @internal */
    contentSize$ = this._contentSize$.asObservable();
    /** @internal */
    _contentSize = 0;
    /** @internal */
    set contentSize(size) {
        this._contentSize = size;
        this._contentSize$.next(size);
    }
    get contentSize() {
        return this._contentSize;
    }
    /** @internal */
    _renderedRange$ = new ReplaySubject(1);
    /** @internal */
    renderedRange$ = this._renderedRange$.asObservable();
    /** @internal */
    _renderedRange = { start: 0, end: 0 };
    // range of items where size is known and doesn't need to be re-calculated
    /** @internal */
    set renderedRange(range) {
        this._renderedRange = range;
        this._renderedRange$.next(range);
    }
    /** @internal */
    get renderedRange() {
        return this._renderedRange;
    }
    /** @internal */
    _scrolledIndex$ = new ReplaySubject(1);
    /** @internal */
    scrolledIndex$ = this._scrolledIndex$.pipe(distinctUntilChanged());
    _scrolledIndex = 0;
    /** @internal */
    set scrolledIndex(index) {
        this._scrolledIndex = index;
        this._scrolledIndex$.next(index);
    }
    get scrolledIndex() {
        return this._scrolledIndex;
    }
    /** @internal */
    get contentLength() {
        return this._virtualItems.length;
    }
    /** @internal */
    containerSize = 0;
    /** @internal */
    _virtualItems = [];
    /** @internal */
    scrollTop = 0;
    /** @internal */
    scrollTopWithOutOffset = 0;
    /** @internal */
    scrollTopAfterOffset = 0;
    /** @internal */
    viewportOffset = 0;
    /** @internal */
    direction = 'down';
    /** @internal */
    anchorScrollTop = 0;
    /** @internal */
    anchorItem = {
        index: 0,
        offset: 0,
    };
    /** @internal */
    lastScreenItem = {
        index: 0,
        offset: 0,
    };
    /** @internal */
    detached$ = new Subject();
    /** @internal */
    recalculateRange$ = new Subject();
    /** @internal */
    until$() {
        return (o$) => o$.pipe(takeUntil(this.detached$));
    }
    /** @internal */
    ngOnChanges(changes) {
        if ((changes['runwayItemsOpposite'] &&
            !changes['runwayItemsOpposite'].firstChange) ||
            (changes['runwayItems'] && !changes['runwayItems'].firstChange)) {
            this.recalculateRange$.next();
        }
    }
    /** @internal */
    ngOnDestroy() {
        this.detach();
    }
    /** @internal */
    attach(viewport, viewRepeater) {
        this.viewport = viewport;
        this.viewRepeater = viewRepeater;
        this.maintainVirtualItems();
        this.calcRenderedRange();
        this.positionElements();
    }
    /** @internal */
    detach() {
        this.viewport = null;
        this.viewRepeater = null;
        this._virtualItems = [];
        this.detached$.next();
    }
    scrollToIndex(index, behavior) {
        const _index = Math.min(Math.max(index, 0), this.contentLength - 1);
        let scrollTo = 0;
        for (let i = 0; i < _index; i++) {
            scrollTo += this._virtualItems[i].size;
        }
        this.scrollTo(scrollTo, behavior);
    }
    scrollTo(scrollTo, behavior) {
        this.waitForScroll =
            scrollTo !== this.scrollTop && this.contentSize > this.containerSize;
        if (this.waitForScroll) {
            this.isStable$.next(false);
        }
        this.viewport.scrollTo(this.viewportOffset + scrollTo, behavior);
    }
    /** @internal */
    maintainVirtualItems() {
        const valueArray$ = this.viewRepeater.values$.pipe(map((values) => Array.isArray(values)
            ? values
            : values != null
                ? Array.from(values)
                : []), shareReplay({ bufferSize: 1, refCount: true }));
        valueArray$.pipe(this.until$()).subscribe((dataArr) => {
            const dataLength = dataArr.length;
            if (!dataLength) {
                this._virtualItems = [];
                this.contentSize = 0;
                this._renderedRange = {
                    start: 0,
                    end: 0,
                };
                this.anchorItem = {
                    index: 0,
                    offset: 0,
                };
                this.recalculateRange$.next();
            }
            else {
                let shouldRecalculateRange = false;
                let contentSize = 0;
                for (let i = 0; i < dataArr.length; i++) {
                    const oldSize = this._virtualItems[i]?.size;
                    const newSize = this.itemSize(dataArr[i]);
                    contentSize += newSize;
                    if (oldSize === undefined || oldSize !== newSize) {
                        this._virtualItems[i] = { size: newSize };
                        if (!shouldRecalculateRange &&
                            (!this.contentSize ||
                                (i >= this.renderedRange.start && i < this.renderedRange.end))) {
                            shouldRecalculateRange = true;
                        }
                    }
                }
                if (dataLength < this._renderedRange.end) {
                    this.anchorItem = this.calculateAnchoredItem({
                        index: dataLength,
                        offset: 0,
                    }, -calculateVisibleContainerSize(this.containerSize, this.scrollTopWithOutOffset, this.scrollTopAfterOffset));
                    this._renderedRange.start = Math.max(0, this.anchorItem.index - this.runwayItems);
                    this._renderedRange.end = dataLength;
                    this.calcAnchorScrollTop();
                    this.scrollTo(contentSize);
                    this.scrollTop = this.anchorScrollTop;
                }
                this.contentSize = contentSize;
                if (shouldRecalculateRange) {
                    this.recalculateRange$.next();
                }
            }
        });
        let valueCache = {};
        /*
         * when keepScrolledIndexOnPrepend is active, we need to listen to data changes and figure out what was appended
         * before the last scrolledToItem
         */
        valueArray$
            .pipe(
        // TODO: this might cause issues when turning on/off at runtime
        filter(() => this.keepScrolledIndexOnPrepend), this.until$())
            .subscribe((valueArray) => {
            const trackBy = this.viewRepeater._trackBy;
            let scrollTo = this.scrolledIndex;
            const dataLength = valueArray.length;
            const oldDataLength = Object.keys(valueCache).length;
            if (oldDataLength > 0) {
                let i = 0;
                // check for each item from the last known scrolledIndex if it's an insert
                for (i; i <= scrollTo && i < dataLength; i++) {
                    // item is not in the valueCache, so it was added
                    if (!valueCache[trackBy(i, valueArray[i])]) {
                        scrollTo++;
                    }
                }
            }
            valueCache = {};
            valueArray.forEach((v, i) => (valueCache[trackBy(i, v)] = v));
            if (scrollTo !== this.scrolledIndex) {
                this.scrollToIndex(scrollTo);
            }
        });
    }
    /** @internal */
    calcRenderedRange() {
        combineLatest([
            this.viewport.containerRect$.pipe(map(({ height }) => {
                this.containerSize = height;
                return height;
            }), distinctUntilChanged()),
            this.viewport.elementScrolled$.pipe(startWith(void 0), tap(() => {
                this.viewportOffset = this.viewport.measureOffset();
                const { scrollTop, scrollTopWithOutOffset, scrollTopAfterOffset } = parseScrollTopBoundaries(this.viewport.getScrollTop(), this.viewportOffset, this._contentSize, this.containerSize);
                this.direction =
                    scrollTopWithOutOffset > this.scrollTopWithOutOffset
                        ? 'down'
                        : 'up';
                this.scrollTopWithOutOffset = scrollTopWithOutOffset;
                this.scrollTopAfterOffset = scrollTopAfterOffset;
                this.scrollTop = scrollTop;
                this.waitForScroll = false;
            })),
            this._contentSize$.pipe(distinctUntilChanged()),
            this.recalculateRange$.pipe(startWith(void 0)),
        ])
            .pipe(
        // make sure to not over calculate things by coalescing all triggers to the next microtask
        coalesceWith(unpatchedMicroTask()), map(() => {
            const range = { start: 0, end: 0 };
            const length = this.contentLength;
            const delta = this.scrollTop - this.anchorScrollTop;
            if (this.scrollTop == 0) {
                this.anchorItem = { index: 0, offset: 0 };
            }
            else {
                this.anchorItem = this.calculateAnchoredItem(this.anchorItem, delta);
            }
            this.scrolledIndex = this.anchorItem.index;
            this.anchorScrollTop = this.scrollTop;
            this.lastScreenItem = this.calculateAnchoredItem(this.anchorItem, calculateVisibleContainerSize(this.containerSize, this.scrollTopWithOutOffset, this.scrollTopAfterOffset));
            if (this.direction === 'up') {
                range.start = Math.max(0, this.anchorItem.index - this.runwayItems);
                range.end = Math.min(length, this.lastScreenItem.index + this.runwayItemsOpposite);
            }
            else {
                range.start = Math.max(0, this.anchorItem.index - this.runwayItemsOpposite);
                range.end = Math.min(length, this.lastScreenItem.index + this.runwayItems);
            }
            if (this.appendOnly) {
                range.start = Math.min(this._renderedRange.start, range.start);
                range.end = Math.max(this._renderedRange.end, range.end);
            }
            return range;
        }))
            .pipe(this.until$())
            .subscribe((range) => {
            this.renderedRange = range;
            this.isStable$.next(!this.waitForScroll);
        });
    }
    /** @internal */
    positionElements() {
        this.viewRepeater.renderingStart$.pipe(switchMap((batchedUpdates) => {
            const renderedRange = this.renderedRange;
            const adjustIndexWith = renderedRange.start;
            const initialIndex = batchedUpdates.size
                ? batchedUpdates.values().next().value + this.renderedRange.start
                : this.renderedRange.start;
            let position = this.calcInitialPosition(initialIndex);
            return this.viewRepeater.viewRendered$.pipe(tap(({ view, index: viewIndex, item }) => {
                const index = viewIndex + adjustIndexWith;
                const size = this.getItemSize(index);
                this.positionElement(this.getElement(view), position);
                position += size;
                this.viewRenderCallback.next({
                    index,
                    view,
                    item,
                });
            }));
        }), this.until$()).subscribe();
    }
    /**
     * @internal
     * heavily inspired by
     *   https://github.com/GoogleChromeLabs/ui-element-samples/blob/gh-pages/infinite-scroller/scripts/infinite-scroll.js
     */
    calculateAnchoredItem(initialAnchor, delta) {
        if (delta == 0)
            return initialAnchor;
        delta += initialAnchor.offset;
        let i = initialAnchor.index;
        const items = this._virtualItems;
        if (delta < 0) {
            while (delta < 0 && i > 0) {
                delta += items[i - 1].size;
                i--;
            }
        }
        else {
            while (delta > 0 && i < items.length && items[i].size <= delta) {
                delta -= items[i].size;
                i++;
            }
        }
        return {
            index: Math.min(i, items.length),
            offset: delta,
        };
    }
    /** @internal */
    calcInitialPosition(start) {
        // Calculate position of starting node
        let pos = this.anchorScrollTop - this.anchorItem.offset;
        let i = this.anchorItem.index;
        while (i > start) {
            const itemSize = this.getItemSize(i - 1);
            pos -= itemSize;
            i--;
        }
        while (i < start) {
            const itemSize = this.getItemSize(i);
            pos += itemSize;
            i++;
        }
        return pos;
    }
    /** @internal */
    calcAnchorScrollTop() {
        this.anchorScrollTop = 0;
        for (let i = 0; i < this.anchorItem.index; i++) {
            this.anchorScrollTop += this.getItemSize(i);
        }
        this.anchorScrollTop += this.anchorItem.offset;
    }
    /** @internal */
    getItemSize(index) {
        return this._virtualItems[index].size;
    }
    /** @internal */
    positionElement(element, scrollTop) {
        element.style.position = 'absolute';
        element.style.transform = `translateY(${scrollTop}px)`;
    }
    /** @nocollapse */ static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "18.0.1", ngImport: i0, type: DynamicSizeVirtualScrollStrategy, deps: null, target: i0.ɵɵFactoryTarget.Directive });
    /** @nocollapse */ static ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "16.1.0", version: "18.0.1", type: DynamicSizeVirtualScrollStrategy, isStandalone: true, selector: "rx-virtual-scroll-viewport[dynamic]", inputs: { runwayItems: "runwayItems", runwayItemsOpposite: "runwayItemsOpposite", appendOnly: ["appendOnly", "appendOnly", toBoolean], keepScrolledIndexOnPrepend: ["keepScrolledIndexOnPrepend", "keepScrolledIndexOnPrepend", toBoolean], itemSize: ["dynamic", "itemSize"] }, providers: [
            {
                provide: RxVirtualScrollStrategy,
                useExisting: DynamicSizeVirtualScrollStrategy,
            },
        ], usesInheritance: true, usesOnChanges: true, ngImport: i0 });
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "18.0.1", ngImport: i0, type: DynamicSizeVirtualScrollStrategy, decorators: [{
            type: Directive,
            args: [{
                    selector: 'rx-virtual-scroll-viewport[dynamic]',
                    providers: [
                        {
                            provide: RxVirtualScrollStrategy,
                            useExisting: DynamicSizeVirtualScrollStrategy,
                        },
                    ],
                    standalone: true,
                }]
        }], propDecorators: { runwayItems: [{
                type: Input
            }], runwayItemsOpposite: [{
                type: Input
            }], appendOnly: [{
                type: Input,
                args: [{ transform: toBoolean }]
            }], keepScrolledIndexOnPrepend: [{
                type: Input,
                args: [{ transform: toBoolean }]
            }], itemSize: [{
                type: Input,
                args: ['dynamic']
            }] } });
//# sourceMappingURL=data:application/json;base64,